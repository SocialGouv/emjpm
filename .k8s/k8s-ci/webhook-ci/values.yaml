project: ""
contextList: ""

git:
  repository:
  branchDefault: master

webhook:
  tokenSecretName: ""
  tokenSecretKey: "token"

kubectl:
  server: ""
  tokenSecretName: ""
  tokenSecretKey: token

k8sJobsNamespace:

registry:
  url: harbor.fabrique.social.gouv.fr
  # url: registry2.dev2.fabrique.social.gouv.fr
  pushPath:
  secretName: harbor-creds
  # secretName: registry2-creds
  userKey: user
  passKey: pass
  pushTag: latest
  cacheTag: buildcache
  cacheUrl: registry.dev2.fabrique.social.gouv.fr
  cachePushPath:
  cacheSecretName: registry-creds
  cacheUserKey: user
  cachePassKey: pass

build:
  context: ""
  dockerfile: ""

buildkit:
  image: moby/buildkit
  # tag: "master-rootless
  tag: v0.8.1-rootless
docker:
  image: docker
  tag: stable
gitclone:
  image: alpine/git
  tag: v2.30.0

labels: {}

# Use this to insert env values into the deployment
env: {}

# Default values for webhook-receiver.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: registry.gitlab.factory.social.gouv.fr/devthejo/webhook-k8s-ci
  # tag: latest
  # pullPolicy: Always
  tag: 1.8.4
  pullPolicy: IfNotPresent

imagePullSecret: webhook-receiver-pullsecret

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 9000

ingress:
  enabled: true
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: webhook-receiver.chart.local
      paths:
        - /
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

hooks:
  build:
    enable: true
    hook:
      id: build
      execute-command: /opt/k8s-ci/build.sh
      trigger-rule:
        match:
          type: value
          value: '{{ getenv "WEBHOOK_TOKEN" | js }}'
          parameter:
            source: url
            name: token
      command-working-directory: /opt
      # response-message: OK
      include-command-output-in-response: true
      pass-environment-to-command:
      - source: url
        name: branch
        envname: BRANCH
      - source: url
        name: context
        envname: CONTEXT
      files:
  deploy:
    enable: true
    hook:
      id: deploy
      execute-command: /opt/k8s-ci/deploy.sh
      trigger-rule:
        match:
          type: value
          value: '{{ getenv "WEBHOOK_TOKEN" | js }}'
          parameter:
            source: url
            name: token
      command-working-directory: /opt
      # response-message: OK
      include-command-output-in-response: true
      pass-environment-to-command:
      - source: url
        name: branch
        envname: BRANCH
      - source: url
        name: context
        envname: CONTEXT
      - source: url
        name: production
        envname: PRODUCTION
      files:
  build-n-deploy:
    enable: true
    hook:
      id: build-n-deploy
      command-working-directory: /opt
      execute-command: /opt/k8s-ci/build-n-deploy.sh
      trigger-rule:
        match:
          type: value
          value: '{{ getenv "WEBHOOK_TOKEN" | js }}'
          parameter:
            source: url
            name: token
      command-working-directory: /opt
      # response-message: OK
      include-command-output-in-response: true
      pass-environment-to-command:
      - source: url
        name: branch
        envname: BRANCH
      - source: url
        name: context
        envname: CONTEXT
      - source: url
        name: production
        envname: PRODUCTION
      files:
  # Leave this hook on all the time, disabling it will break livenessProbe
  status:
    enable: true
    files:
      /data/status.sh: |
        #!/bin/sh
        echo Online we are!
    hook:
      id: status
      execute-command: /data/status.sh
      response-message: Online
      include-command-output-in-response: true