#

Install knex:
  extends: .base_yarn_workspace_install
  variables:
    CONTEXT: knex
  before_script:
    - find packages -maxdepth 1 -type d -not -name knex | tail -n +2 | xargs rm -rf
  artifacts:
    expire_in: 1 day
    paths:
      - node_modules
      - packages/knex/node_modules

#

# Lint @emjpm/knex:
#   extends: .quality_stage
#   image: node:12-alpine
#   needs:
#     - Install knex
#   dependencies:
#     - Install knex
#   script:
#     - yarn workspace @emjpm/knex lint

# Test @emjpm/knex:
#   extends: .quality_stage
#   image: node:12-alpine
#   needs:
#     - Install knex
#   dependencies:
#     - Install knex
#   services:
#     - name: postgres:10-alpine
#   allow_failure: true
#   retry: 1
#   timeout: 2 minutes
#   variables:
#     DATABASE_URL: psql://postgres:@localhost/emjpm
#     PGHOST: localhost
#     PGUSER: postgres
#   before_script:
#     - apk add --update --no-cache postgresql=~11
#     - psql --version
#     #
#     - npx wait-for-postgres --host localhost --port 5432 --username=${PGUSER}
#   script:
#     - sh -x docker/postgres/postgres-init.sh
#     - yarn workspace @emjpm/knex test

#

Register knex image:
  extends:
    - .base_register_stage
    - .register_stage
  dependencies: []
  needs:
    - Install knex
  before_script:
    - cp yarn.lock packages/knex/yarn.lock
  variables:
    CONTEXT: packages/knex
    IMAGE_NAME: $CI_REGISTRY_IMAGE/knex

#

.deploy_knex_stage: &deploy_knex_stage
  dependencies: []
  stage: Deploy
  extends: .base_docker_kubectl_image_stage
  variables:
    CONTEXT: knex
    IMAGE_TAG: $CI_COMMIT_SHA
  script:
    - source ./.gitlab-ci/env.sh
    - kubectl config set-context --current --namespace=${K8S_NAMESPACE}
    #
    - export POSTGRESQL_USER=emjpm
    - export POSTGRESQL_PASSWORD=$(kubectl get secret emjpm-secret -o jsonpath='{.data.POSTGRES_EMJPM_PASSWORD}' | base64 --decode)
    #
    # Dataset job
    - kubectl delete configmap dataset-configmap || true;
    - kubectl create configmap dataset-configmap
        --from-file=./.k8s/postgres/dataset/configmap
    #
    - kubectl delete job dataset || true;
    - cat ./.k8s/postgres/dataset/job-inject-dataset.yml | envsubst | kubectl apply -f -
    #
    # Backup cronjob
    - kubectl delete configmap ${K8S_PROJECT}-backup-configmap-${BRANCH_HASH} || true;
    - kubectl create configmap ${K8S_PROJECT}-backup-configmap-${BRANCH_HASH}
        --from-file=./.k8s/postgres/backup/configmap
    #
    - if [ -n "${PRODUCTION+x}" ]; then
        kubectl delete cronjob ${K8S_PROJECT}-backup-${BRANCH_HASH} || true;
        cat ./.k8s/postgres/backup/cronjob.yml | envsubst | kubectl apply -f -;
      fi

#

Deploy knex (dev):
  extends:
    - .deploy_knex_stage
    - .dev_stage

Deploy knex (prod):
  extends:
    - .deploy_knex_stage
    - .incubateur_stage
