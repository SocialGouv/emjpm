type Mutation {
  calculate_mesures (
    serviceId: Int
    mandataireId: Int
  ): CalculateMesuresOutput
}


type Mutation {
  email_reservation (
    mesure_id: Int!
  ): EmailReservationOutput
}


type Query {
  enquete_reponse_validation_status (
    enqueteId: Int!
    userId: Int
    reponseId: Int
  ): EnqueteReponseStatus
}


type Mutation {
  export_mesures_file (
    serviceId: Int
    mandataireUserId: Int
  ): FileOutput
}


type Mutation {
  import_base_finess (
    url: String!
  ): ImportFinessOutput
}


type Query {
  stat_available_mesures (
    departementId: Int
    regionId: Int
  ): StatAvailableMesuresOutput
}


type Query {
  stat_awaiting_mesures (
    departementId: Int
    regionId: Int
    start: date!
    end: date!
  ): StatAwaitingMesuresOutput
}


type Query {
  stat_closed_mesures (
    departementId: Int
    regionId: Int
    start: date!
    end: date!
  ): StatClosedMesuresOutput
}


type Query {
  stat_opened_mesures (
    departementId: Int
    regionId: Int
    start: date!
    end: date!
  ): StatOpenedMesuresOutput
}


type Mutation {
  submit_enquete_reponse (
    enqueteId: Int!
  ): EnqueteReponseSubmitted
}


type Mutation {
  upload_enquete_file (
    content: String!
    enqueteId: Int!
    userId: Int
  ): FileOutput
}


type Mutation {
  upload_mesures_file (
    name: String!
    type: String!
    content: String!
    antennesMap: String
    serviceId: Int
    mandataireUserId: Int
  ): FileOutput
}




input EmailReservationInput {
  mesure_id : Int!
}

input StatAvailableMesuresInput {
  department : Int!
  region : Int!
}

type FileOutput {
  data : String!
}

type EnqueteIndividuelReponse {
  enquete_id : Int!
  submitted_at : timestamptz
  enquete_reponses_id : Int!
  enquete_reponses_status : json!
  enquete_reponses_informations_mandataire_id : Int
  enquete_reponses_prestations_sociale_id : Int
  enquete_reponses_agrements_formations_id : Int
  enquete_reponses_activite_id : Int
  enquete_reponses_populations_id : Int
}

type SubmittedEnqueteReponse {
  id : Int!
  submitted_at : timestamptz!
}

type EnqueteReponseSubmitted {
  enquete_id : Int!
  enquete_reponses_id : Int!
  submitted_at : timestamptz
}

type EnquetePreposeReponse {
  enquete_id : Int!
  submitted_at : timestamptz
  enquete_reponses_id : Int!
  enquete_reponses_status : json!
  enquete_reponses_modalites_exercice_id : Int
  enquete_reponses_modalites_exercice_status : Int!
  enquete_reponses_populations_id : Int
  enquete_reponses_populations_curatelle_status : Int!
  enquete_reponses_populations_tutelle_status : Int!
  enquete_reponses_populations_accompagnement_judiciaire_status : Int!
  enquete_reponses_populations_sauvegarde_justice_status : Int!
  enquete_reponses_populations_autre_status : Int!
  enquete_reponses_financement_id : Int!
  enquete_reponses_activite_id : Int!
}

type EnqueteReponseStatus {
  enquete_id : Int!
  submitted_at : timestamptz
  status : String!
  user_type : String!
  enquete_reponse_ids : json!
  enquete_reponse_validation_status : json!
  mandataire : json
  service : json
}

type ImportFinessOutput {
  data : String!
}

type EmailReservationOutput {
  result : String!
}

type CalculateMesuresOutput {
  success : Boolean!
  updatedRows : Int!
}

type StatAvailableMesuresOutput {
  available_mesures_nb : Int!
}

type StatClosedMesuresOutput {
  closed_mesures_nb : Int!
}

type StatOpendMesuresOutput {
  opened_mesures_nb : Int!
}

type StatOpenedMesuresOutput {
  opened_mesures_nb : Int!
}

type StatAwaitingMesuresOutput {
  awaiting_mesures_nb : Int!
}

