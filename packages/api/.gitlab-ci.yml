#

Install api:
  extends: .base_yarn_workspace_install
  variables:
    CONTEXT: api
  before_script:
    - find packages -maxdepth 1 -type d -not -name api -not -name knex | tail -n +2 | xargs rm -rf
  artifacts:
    expire_in: 1 day
    paths:
      - node_modules
      - packages/api/node_modules

#

# Lint @emjpm/api:
#   extends: .quality_stage
#   image: node:12-alpine
#   dependencies:
#     - Install api
#   needs:
#     - Install api
#   script:
#     - yarn workspace @emjpm/api lint

# Test @emjpm/api:
#   extends: .quality_stage
#   image: node:12-alpine
#   dependencies:
#     - Install api
#   needs:
#     - Install api
#   services:
#     - name: postgres:10-alpine
#   allow_failure: true
#   retry: 1
#   variables:
#     DATABASE_URL: psql://postgres:@localhost/emjpm
#     PGHOST: localhost
#     PGUSER: postgres
#     TZ: Europe/Paris
#   before_script:
#     - apk add --update --no-cache postgresql=~11
#     - psql --version
#     #
#     - npx wait-for-postgres --host localhost --port 5432 --username=${PGUSER}
#   script:
#     - sh -x docker/postgres/postgres-init.sh
#     - yarn workspace @emjpm/api test

#

Build @emjpm/api:
  extends: .quality_stage
  dependencies:
    - Install api
  needs:
    - Install api
  image: node:12-alpine
  script:
    - yarn workspace @emjpm/api build
  artifacts:
    expire_in: 1 day
    paths:
      - packages/api/dist

#

Register api image:
  extends:
    - .base_register_stage
    - .register_stage
  dependencies:
    - Build @emjpm/api
  needs:
    - Install api
    - Build @emjpm/api
  before_script:
    - cp yarn.lock packages/api/yarn.lock
  variables:
    CONTEXT: packages/api
    IMAGE_NAME: $CI_REGISTRY_IMAGE/api

#

.deploy_api_stage:
  dependencies: []
  stage: Deploy
  extends: .base_deploy_nodejs_chart_stage
  variables:
    CONTEXT: api
    IMAGE_TAG: $CI_COMMIT_SHA
    PORT: 80
    VALUES_FILE: ./packages/api/.k8s.values.yml
  before_script:
    - source ./.gitlab-ci/env.sh
    - kubectl config set-context --current --namespace=${K8S_NAMESPACE}
    #
    - export POSTGRESQL_USER=emjpm
    - export POSTGRESQL_PASSWORD=$(kubectl get secret emjpm-secret -o jsonpath='{.data.POSTGRES_EMJPM_PASSWORD}' | base64 --decode)
    #
    - HOST=${API_HOST}

#

Deploy api (dev):
  extends:
    - .deploy_api_stage
    - .dev_stage

Deploy api (prod):
  extends:
    - .deploy_api_stage
    - .incubateur_stage
