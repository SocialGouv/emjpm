#

.mino: &minio |
  MINIO=https://minio.fabrique.social.gouv.fr
  BUCKET=gitlab-runner

  function tokenS3() {

    curl ${MINIO}'/minio/webrpc'\
      -H 'Content-Type: application/json'\
      --data-binary '{"id":1,"jsonrpc":"2.0","params":{"username":"'${S3KEY}'","password":"'${S3SECRET}'"},"method":"Web.Login"}'\
      > json

    cat json | sed "s/{.*\"token\":\"\([^\"]*\).*}/\1/g" > TOKEN_S3

  }

  function putS3() {
    local file=$1
    local path=$2

    tokenS3

    curl ${MINIO}'/minio/upload/'${BUCKET}'/'${CI_PROJECT_PATH}'/'${path}\
      -H 'Authorization: Bearer '$(cat TOKEN_S3)\
      -H 'User-Agent: Mozilla/5.0 (I am cURL ^^)'\
      -T ${file} \
      -X PUT
  }

  function getS3() {
    local file=$1

    tokenS3

    curl ${MINIO}'/minio/download/'${BUCKET}'/'${CI_PROJECT_PATH}'/'${file}'?token='$(cat TOKEN_S3)\
      -H 'User-Agent: Mozilla/5.0 (I am cURL ^^)'
  }

.manual_caching: &manual_caching |

  function creating_cache() {
    local file=${1}
    local folder="${2}"

    if [[ ! -d ${folder} ]]; then
      echo "No ${folder} to cache"
      return
    fi

    echo "Creating ${file} from ${folder}"
    time tar czf ${file} ${folder}

    # if [[ -f cache.tar.gz]] &&\
    #   [[ diff cache.tar.gz ${file} ]] ; then
    #   echo "No changes detected"
    #   return
    # fi

    echo "Uploading ${file} to ${MINIO}/minio/upload/${BUCKET}/${CI_PROJECT_PATH}/${CI_COMMIT_REF_SLUG}/${file}"
    putS3 ${file} "${CI_COMMIT_REF_SLUG}/${file}"
    echo "Successfully uploaded"
  }

Install api:
  extends: .prepare_stage
  image: node:12-alpine
  # rules:
  #   - changes:
  #       - packages/api/.gitlab-ci.yml
  #       - packages/api/package.json
  #       - yarn.lock
  #     when: always
  cache:
    key: "$CI_COMMIT_REF_SLUG-api"
    paths:
      - YARN_CACHE_URL
      - NODE_MODULES_CACHE_URL
    policy: pull-push
  before_script:
    - *minio
    - *manual_caching
    - apk add curl=~7 jq=~1
    - find packages -maxdepth 1 -type d -not -name api -not -name knex | tail -n +2 | xargs rm -rf
    - set -x
    - echo "lol" > foo.txt
    # - >-

    #   function checking_cache() {
    #     local url="${1}"
    #     echo "Downloading cache.tar.gz from ${url}"
    #     time curl -s -o cache.tar.gz ${url}
    #     echo "Extracting cache.tar.gz"
    #     time tar xzf cache.tar.gz
    #     echo "Successfully extracted cache"
    #   }

    # - >-
    #   if [[ -f YARN_CACHE_URL ]]; then
    #     checking_cache $(cat YARN_CACHE_URL)
    #   fi

    # - >-
    #   if [[ -f NODE_MODULES_CACHE_URL ]]; then
    #     checking_cache $(cat NODE_MODULES_CACHE_URL)
    #   fi

    - set +x
  script:
    - yarn config set cache-folder $CI_PROJECT_DIR/.yarn
    - yarn --frozen-lockfile
  after_script:
    - *minio
    - *manual_caching
    - set -x

    - creating_cache yarn.tar.gz .yarn && mv URL YARN_CACHE_URL;
    # - creating_cache node_modules && mv URL NODE_MODULES_CACHE_URL;

    - set +x
  artifacts:
    expire_in: 30 mins
    paths:
      - node_modules
      - packages/api/node_modules

#

Lint @emjpm/api:
  extends: .quality_stage
  image: node:12-alpine
  dependencies:
    - Install api
  needs:
    - Install api
  script:
    - yarn workspace @emjpm/api lint

Test @emjpm/api:
  extends: .quality_stage
  image: node:12-alpine
  dependencies:
    - Install api
  needs:
    - Install api
  services:
    - name: postgres:10-alpine
  allow_failure: true
  retry: 1
  variables:
    DATABASE_URL: psql://postgres:@localhost/emjpm
    PGHOST: localhost
    PGUSER: postgres
    TZ: Europe/Paris
  before_script:
    - apk add --update --no-cache postgresql=~11
    - psql --version
    #
    - pg_isready -h localhost
  script:
    - sh -x docker/postgres/postgres-init.sh
    - yarn workspace @emjpm/api test

#

Build @emjpm/api:
  extends: .quality_stage
  dependencies:
    - Install api
  needs:
    - Install api
  image: node:12-alpine
  script:
    - yarn workspace @emjpm/api build
  artifacts:
    expire_in: 30 mins
    paths:
      - packages/api/dist

#

Register api image:
  extends:
    - .base_register_stage
    - .register_stage
  dependencies:
    - Build @emjpm/api
  needs:
    - Build @emjpm/api
  before_script:
    - cp yarn.lock packages/api/yarn.lock
  variables:
    CONTEXT: packages/api
    IMAGE_NAME: $CI_REGISTRY_IMAGE/api
