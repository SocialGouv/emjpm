apiVersion: batch/v1
kind: Job
metadata:
  name: pipeline-{{.Env.K8SCI_GID}}-job-db-create
  labels:
    app.kubernetes.io/managed-by: k8sci
    k8sci/gid: "{{.Env.K8SCI_GID}}"
    k8sci/type: job
    k8sci/job: db-create
spec:
  backoffLimit: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/managed-by: k8sci
        k8sci/gid: "{{.Env.K8SCI_GID}}"
        k8sci/type: job
        k8sci/job: db-create
    spec:
      restartPolicy: Never
      containers:
        - name: create-job
          image: postgres:10-alpine
          env:
            - name: PGSSLMODE
              value: "require"
            - name: PGHOST
              valueFrom:
                secretKeyRef:
                  name: {{.Env.PSQL_CREDS_SECRET_NAME}}
                  key: PGHOST
            - name: DB_NAME
              value: {{.Env.DB_NAME}}
            - name: APP_PG_ROLE
              value: {{.Env.APP_PG_ROLE}}
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: {{.Env.PSQL_CREDS_SECRET_NAME}}
                  key: ADMIN_PGUSER
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{.Env.PSQL_CREDS_SECRET_NAME}}
                  key: ADMIN_PGPASSWORD
          command:
            - sh
            - -c
            - |
              set -e
              psql -v ON_ERROR_STOP=1 postgres <<EOF
                CREATE DATABASE "${DB_NAME}";
                \c "${DB_NAME}"

                CREATE EXTENSION IF NOT EXISTS pgcrypto;

                GRANT CONNECT ON DATABASE "${DB_NAME}" TO ${APP_PG_ROLE};
                GRANT ALL PRIVILEGES ON DATABASE "${DB_NAME}" TO ${APP_PG_ROLE};
              EOF
      volumes:
        - name: {{.Env.PSQL_CREDS_SECRET_NAME}}
          secret:
            secretName: {{.Env.PSQL_CREDS_SECRET_NAME}}
