apiVersion: batch/v1
kind: Job
metadata:
  name: pipeline-{{.Env.K8SCI_GID}}-job-db-create
  labels:
    app.kubernetes.io/managed-by: k8sci
    k8sci/gid: "{{.Env.K8SCI_GID}}"
    k8sci/type: job
    k8sci/job: db-create
spec:
  backoffLimit: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/managed-by: k8sci
        k8sci/gid: "{{.Env.K8SCI_GID}}"
        k8sci/type: job
        k8sci/job: db-create
    spec:
      restartPolicy: Never
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      initContainers:
        - name: git-clone-repo
          image: alpine/git:v2.30.0
          command:
            - sh
            - -c
            - |
              git clone \
                --depth 1 \
                {{.Env.K8SCI_REPOSITORY}} \
                --branch {{.Env.K8SCI_BRANCH}} \
                --single-branch \
                /workspace
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
          volumeMounts:
            - name: workspace
              mountPath: /workspace
      containers:
        - name: create-job
          image: postgres:10-alpine
          volumeMounts:
            - name: workspace
              readOnly: true
              mountPath: /workspace
          env:
            - name: PGSSLMODE
              value: "require"
            - name: PGHOST
              valueFrom:
                secretKeyRef:
                  name: {{.Env.PSQL_CREDS_SECRET_NAME}}
                  key: PGHOST
            - name: DB_NAME
              value: {{.Env.DB_NAME}}
            - name: APP_PG_ROLE
              value: {{.Env.APP_PG_ROLE}}
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: {{.Env.PSQL_CREDS_SECRET_NAME}}
                  key: ADMIN_PGUSER
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{.Env.PSQL_CREDS_SECRET_NAME}}
                  key: ADMIN_PGPASSWORD
          command:
            - /bin/bash
            - -c
            - |
              set -e
              # psql -v ON_ERROR_STOP=1 postgres <<EOF
              #   CREATE DATABASE "${DB_NAME}";
              #   \c "${DB_NAME}"

              #   CREATE EXTENSION IF NOT EXISTS pgcrypto;

              #   GRANT CONNECT ON DATABASE "${DB_NAME}" TO ${APP_PG_ROLE};
              #   GRANT ALL PRIVILEGES ON DATABASE "${DB_NAME}" TO ${APP_PG_ROLE};
              # EOF

              # urlencode() {
              #   STDIN=`cat /dev/stdin`
              #   local length="${#STDIN}"
              #   for (( i = 0; i < length; i++ )); do
              #       local c="${STDIN:i:1}"
              #       case $c in
              #           [a-zA-Z0-9.~_-]) printf "$c" ;;
              #           *) printf '%s' "$c" | xxd -p -c1 |
              #                 while read c; do printf '%%%s' "$c"; done ;;
              #       esac
              #   done
              # }

              # PGUSER_ENCODED=`echo -e "$PGUSER" | urlencode`
              # PGPASSWORD_ENCODED=`echo -e "$PGPASSWORD" | urlencode`
                # --dbname=postgresql://${PGUSER_ENCODED}:${PGPASSWORD_ENCODED}@${PGHOST}:5432/${DB_NAME} \

              set "PGPASSWORD=$PGPASSWORD"
              pg_restore \
                -U "$PGUSER" \
                -h $PGHOST \
                -p 5432 \
                -d $DB_NAME \
                --if-exists \
                --clean \
                --no-owner \
                --no-acl \
                -e \
                -Fc \
                -v < /workspace/db-seed/devdb.dump
      volumes:
        - name: {{.Env.PSQL_CREDS_SECRET_NAME}}
          secret:
            secretName: {{.Env.PSQL_CREDS_SECRET_NAME}}
        - name: workspace
          emptyDir: {}
