#!/bin/bash

set -e

set -a
source $(dirname $0)/.env-k8s
set +a

if [ -n "$K8SCI_PRODUCTION" ]; then
  export K8SCI_HELM_ARGS="$K8SCI_HELM_ARGS
    --set ingress.annotations.certmanager\.k8s\.io/cluster-issuer=letsencrypt-prod
    --set-string ingress.annotations.kubernetes\.io/tls-acme=true
    --set tlsSecretName=${K8SCI_CONTEXT}-certificate
    --set replicas=2
    "
  export APP_DOMAIN="${ROOT_DOMAIN}"
else
  export K8SCI_HELM_ARGS="${K8SCI_HELM_ARGS}
    --set tlsSecretName=wildcard-crt
    "
  DOMAIN_SLUG=$(echo $K8SCI_BRANCH | sed -e 's/[^[:alnum:]]/-/g' | cut -c1-32)
  export APP_DOMAIN="${DOMAIN_SLUG}-${ROOT_DOMAIN}"
fi

for context in $K8SCI_CONTEXT_LIST; do

  export K8SCI_CONTEXT=$context
  export IMAGE_PATH="$K8SCI_PROJECT/$K8SCI_CONTEXT"
  export K8SCI_HELM_CHART="packages/$K8SCI_CONTEXT/.k8s"
  export K8SCI_HELM_RELEASE="$K8SCI_CONTEXT"

  if [ -n "$K8SCI_PRODUCTION" ]; then
    export K8SCI_HELM_ARGS="$K8SCI_HELM_ARGS
      --set ingress.annotations.certmanager\.k8s\.io/cluster-issuer=letsencrypt-prod
      --set-string ingress.annotations.kubernetes\.io/tls-acme=true
      --set tlsSecretName=${K8SCI_CONTEXT}-certificate
      --set replicas=2
      "
    export HASURA_GRAPHQL_PG_CONNECTIONS="16"
  else
    export K8SCI_HELM_ARGS="${K8SCI_HELM_ARGS}
      --set tlsSecretName=wildcard-crt
      "
    export HASURA_GRAPHQL_PG_CONNECTIONS="2"
  fi

  case $K8SCI_CONTEXT in
    app)
      export CONTEXT_DOMAIN=$APP_DOMAIN
      ;;
    api)
      export CONTEXT_DOMAIN="api-$APP_DOMAIN"
      export K8SCI_HELM_ARGS="$K8SCI_HELM_ARGS
        --set appURL=https://$APP_DOMAIN
        --set dbName=$DB_NAME
        "
      if [ -n "$K8SCI_PRODUCTION" ]; then
        export K8SCI_HELM_ARGS="$K8SCI_HELM_ARGS
          --set env=prod
          "
      else
        export K8SCI_HELM_ARGS="$K8SCI_HELM_ARGS
          --set env=dev
          "
      fi
      ;;
    hasura)
      export CONTEXT_DOMAIN="hasura-$APP_DOMAIN"
      export K8SCI_HELM_ARGS="$K8SCI_HELM_ARGS
        --set dbName=$DB_NAME
        --set pgConnections=$HASURA_GRAPHQL_PG_CONNECTIONS
        "
      ;;
  esac

  export K8SCI_HELM_ARGS="$K8SCI_HELM_ARGS
    --set host=${CONTEXT_DOMAIN}
    --set image.repository=${K8SCI_REGISTRY_URL}/${IMAGE_PATH}
    --set image.tag=${K8SCI_IMAGE_TAG}
    --set secretName=emjpm-secret
    "
  /opt/jobs/deploy/create.sh
done


# wait job
for context in $K8SCI_CONTEXT_LIST; do
  /opt/k8sci-wait-job "pipeline-${K8SCI_GID}-job-deploy-${context}"
done
