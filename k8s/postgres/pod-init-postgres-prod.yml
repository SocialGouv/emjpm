---
kind: Pod
apiVersion: v1
metadata:
  name: emjpm-init-postgres${HASH_BRANCH_NAME}
  labels:
    app: emjpm-init-postgres${HASH_BRANCH_NAME}
    branch: emjpm${HASH_BRANCH_NAME}
spec:
  containers:
  - image: postgres:11-alpine
    name: emjpm-init-postgres${HASH_BRANCH_NAME}
    command: ["sh"]
    args: ["/app/postgres-init.sh"]
    env:
    - name: POSTGRES_USER
      valueFrom:
        secretKeyRef:
          name: emjpm-secret
          key: POSTGRES_USER
    - name: PGPASSWORD
      valueFrom:
        secretKeyRef:
          name: emjpm-secret
          key: POSTGRES_PASSWORD
    - name: POSTGRES_HOST
      valueFrom:
        secretKeyRef:
          name: emjpm-secret
          key: POSTGRES_HOST
    - name: POSTGRES_API_USER
      valueFrom:
        secretKeyRef:
          name: emjpm-secret
          key: POSTGRES_API_USER
    - name: POSTGRES_API_USER_PASSWORD
      valueFrom:
        secretKeyRef:
          name: emjpm-secret
          key: POSTGRES_API_USER_PASSWORD
    - name: POSTGRES_READONLY_USER_NAME
      valueFrom:
        secretKeyRef:
          name: emjpm-secret
          key: POSTGRES_READONLY_USER_NAME
    - name: POSTGRES_READONLY_USER_PASSWORD
      valueFrom:
        secretKeyRef:
          name: emjpm-secret
          key: POSTGRES_READONLY_USER_PASSWORD
    volumeMounts:
    - mountPath: /var/lib/postgresql/data
      name: postgredb
    - name: init-postgres
      mountPath: /app
  volumes:
  - name: postgredb
    emptyDir: {}
  - name: init-postgres
    configMap:
      name: init-postgres
  restartPolicy: Never
  initContainers:
  - name: wait-for-postgres
    image: postgres:11-alpine
    imagePullPolicy: Always
    command:
    - sh
    - -c
    - |
      retry=120; # 5s * (12 * 10) = 10min
      while ! pg_isready -h ${POSTGRES_HOST} > /dev/null 2> /dev/null && [[ $(( retry-- )) -gt 0 ]];
        do
          echo "Waiting for Postgres to go Green ($(( retry )))" ; sleep 5s ; done ;
      echo Ready;
