#

.base_docker_image_stage:
  image: docker:$DOCKER_VERSION
  services:
    - docker:$DOCKER_VERSION-dind

#

.base_docker_kube_image_stage:
  image: $CI_REGISTRY/socialgouv/docker/kubectl:0.7.0
  before_script:
    - source ./.gitlab-ci/env.sh
    - kubectl config set-context --current --namespace=${K8S_NAMESPACE}
    - if [ -n "${PRODUCTION+x}" ]; then SUFFIX=".prod"; else SUFFIX=".dev"; fi

.base_docker_helm_image_stage:
  extends: .base_docker_kube_image_stage
  image: $CI_REGISTRY/socialgouv/docker/helm:0.6.0

#

.base_register_stage:
  extends: .base_docker_image_stage
  script:
    - echo "$CI_JOB_TOKEN" | docker login $CI_REGISTRY -u gitlab-ci-token --password-stdin
    - >
      if [[ -n "${CI_COMMIT_TAG}" ]]; then
        export TAG=$(printf "${CI_COMMIT_TAG}" | sed "s/^v//")
      else
        export TAG=$CI_COMMIT_REF_SLUG
      fi
    #
    - docker pull $IMAGE_NAME:$CI_COMMIT_BEFORE_SHA || true
    - docker pull $IMAGE_NAME:$TAG || true
    - docker pull $IMAGE_NAME:master || true
    - echo "> docker build $DOCKER_BUILD_ARGS --cache-from $IMAGE_NAME:$CI_COMMIT_BEFORE_SHA --cache-from $IMAGE_NAME:$TAG --cache-from $IMAGE_NAME:master -t $IMAGE_NAME:$CI_COMMIT_SHA -t $IMAGE_NAME:$TAG $CONTEXT"
    - docker build $DOCKER_BUILD_ARGS --cache-from $IMAGE_NAME:$CI_COMMIT_BEFORE_SHA --cache-from $IMAGE_NAME:$TAG --cache-from $IMAGE_NAME:master -t $IMAGE_NAME:$CI_COMMIT_SHA -t $IMAGE_NAME:$TAG $CONTEXT
    - docker push $IMAGE_NAME:$CI_COMMIT_SHA
    - docker push $IMAGE_NAME:$TAG

#

.git_changes: &git_changes |
  function did_changes() {
    git diff --stat HEAD..origin/${CI_DEFAULT_BRANCH} | head -1 | cut -d' ' -f2 | grep $1
  }

.mino: &minio |
  MINIO=https://minio.fabrique.social.gouv.fr
  BUCKET=gitlab-runner

  function tokenS3() {

    curl -Ss \
      -H 'Content-Type: application/json' \
      --data-binary '{"id":1,"jsonrpc":"2.0","params":{"username":"'${S3KEY}'","password":"'${S3SECRET}'"},"method":"Web.Login"}'\
      ${MINIO}'/minio/webrpc' \
    > json

    cat json | sed "s/{.*\"token\":\"\([^\"]*\).*}/\1/g" > TOKEN_S3

  }

  function putS3() {
    local file=$1
    shift;
    local path=$1
    shift;

    tokenS3

    curl -Ss \
      -w '\nEstablish Connection: %{time_connect}s\nTTFB: %{time_starttransfer}s\nTotal: %{time_total}s\n' \
      -H 'Authorization: Bearer '$(cat TOKEN_S3) \
      -H 'User-Agent: Mozilla/5.0 (I am cURL ^^)' \
      -T ${file} \
      -X PUT \
      "$@" \
      ${MINIO}'/minio/upload/'${BUCKET}'/'${CI_PROJECT_PATH}'/'${path}
  }

  function getS3() {
    local path=$1
    shift;

    tokenS3

    curl -Ss \
      -w '\nEstablish Connection: %{time_connect}s\nTTFB: %{time_starttransfer}s\nTotal: %{time_total}s\n' \
      -H 'User-Agent: Mozilla/5.0 (I am cURL ^^)' \
      "$@" \
      ${MINIO}'/minio/download/'${BUCKET}'/'${CI_PROJECT_PATH}'/'${path}'?token='$(cat TOKEN_S3)
  }

.manual_caching: &manual_caching |
  export PROJECT_FOLDER=${CI_PROJECT_PATH}/${CI_COMMIT_REF_SLUG}

  function checking_cache() {
    local file="${1}"
    local url=${MINIO}/minio/upload/${BUCKET}/${PROJECT_FOLDER}/${file}

    echo "Downloading cache.tar.gz from ${url}"
    getS3 "${CI_COMMIT_REF_SLUG}/${file}" -s -o cache.tar.gz

    echo "Extracting cache.tar.gz"
    if ! tar tf cache.tar.gz &> /dev/null ; then
      echo "Invalid cache.tar.gz"
      return 1
    fi

    time tar xzf cache.tar.gz
    echo ""
    echo "Successfully extracted cache"
  }

  function creating_cache() {
    local file=${1}
    shift;
    local folders=${@}

    echo "Creating ${file} from ${folders}"
    time tar czf ${file} ${folders}
    echo ""

    if [[ -f cache.tar.gz ]]; then
      if diff -s cache.tar.gz ${file}; then
        echo "No changes detected"
        return
      fi
    fi

    local url=${MINIO}/minio/upload/${BUCKET}/${PROJECT_FOLDER}/${file}
    echo "Uploading ${file} to ${url}"
    putS3 "${file}" "${CI_COMMIT_REF_SLUG}/${file}"
    echo "${file}" > URL
    echo "Successfully uploaded"
  }

.base_yarn_workspace_install:
  extends: .prepare_stage
  image: node:12-alpine
  variables:
    CONTEXT: ${CI_JOB_NAME}
  script:
    - *minio
    - *git_changes
    - *manual_caching
    - apk add curl=~7 git=~2
    #
    - checking_cache ${CONTEXT}-yarn.tar.gz || checking_cache ${CI_DEFAULT_BRANCH}-yarn.tar.gz || true
    - checking_cache ${CONTEXT}-node_modules.tar.gz || checking_cache ${CI_DEFAULT_BRANCH}-node_modules.tar.gz || true
    #
    - git fetch origin ${CI_DEFAULT_BRANCH}
    - changes "^packages/${CONTEXT}" || exit ${CI_JOB_SKIP_EXIT_CODE:-0}"
    #
    - yarn config set cache-folder $CI_PROJECT_DIR/.yarn
    - yarn --frozen-lockfile
    #
    - creating_cache ${CONTEXT}-yarn.tar.gz .yarn || true
    - creating_cache ${CONTEXT}-node_modules.tar.gz node_modules packages/${CONTEXT}/node_modules || true
