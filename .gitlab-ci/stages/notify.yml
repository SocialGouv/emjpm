#

include:
  - project: SocialGouv/gitlab-ci-yml
    file: /base_notify_github_stage.yml
    ref: v4.6.0
  - project: SocialGouv/gitlab-ci-yml
    file: /base_delete_useless_k8s_ns_stage.yml
    ref: v4.6.0

#

Notify Starting Deployment:
  extends:
    - .base_notify_pending_stage
    - .base_stage
  stage: Deploy

Notify Fail:
  extends:
    - .base_notify_fail_stage
    - .base_stage
  stage: Notify Finished Deployment
  dependencies:
    - Notify Starting Deployment
  before_script:
    - source ./.gitlab-ci/env.sh
    - HOST=${FRONTEND_HOST}

Notify Success:
  extends:
    - .base_notify_success_stage
    - .base_stage
  stage: Notify Finished Deployment
  dependencies:
    - Notify Starting Deployment
  before_script:
    - source ./.gitlab-ci/env.sh
    - HOST=${FRONTEND_HOST}

#
#
#

Delete useless k8s namespaces:
  extends:
    - .base_delete_useless_k8s_ns_stage
    - .base_stage

#
#
#


Release:
  stage: Prepare
  dependencies: []
  image: node:12.14-alpine3.10
  variables:
    LERNA_ARGS: --force-publish --yes
    #
    GIT_AUTHOR_EMAIL: 45039513+SocialGroovyBot@users.noreply.github.com
    GIT_AUTHOR_NAME: Social Groovy Bot
    GIT_COMMITTER_EMAIL: $GIT_AUTHOR_EMAIL
    GIT_COMMITTER_NAME: $GIT_AUTHOR_NAME
    GIT_DEPTH: 4242
  only:
    variables:
      - $RELEASE
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - node_modules
      - $CI_PROJECT_DIR/.yarn
  before_script:
  script:
    # Ensure to have "git" and "jq"
    - apk add --no-cache git=~2 jq=~1
    # Set git to a branch
    - git checkout ${CI_COMMIT_REF_NAME}
    # Use github as origin
    - git remote set-url origin https://${GITHUB_TOKEN}@github.com/${CI_PROJECT_PATH}.git

    # HACK(douglasduteil): remove all packages dependencies
    # To make the installation blazing fast, we remove all packages dependencies
    # Only the root package.json dependencies will be installed
    - find packages -maxdepth 1 -type d | tail -n +2 |
      xargs -I {} sh -c "[[ -f "{}/package.json" ]] || exit 0 ; {
        rm {}/package.json ;
        jq 'del(.dependencies) | del(.devDependencies)' > {}/package.json
      ; } < {}/package.json"

    # Use local yarn cache
    - yarn config set cache-folder $CI_PROJECT_DIR/.yarn
    # Should only install workspace dependencies
    - yarn --frozen-lockfile

    # HACK(douglasduteil): remove all packages dependencies
    # Restore the package files before bumping versions.
    # As Lerna will commit, we need to restore the files as they were
    - git checkout -- .

    # Run lerna version
    - echo "yarn lerna version ${LERNA_ARGS}"
    - GH_TOKEN=${GITHUB_TOKEN} yarn lerna version ${LERNA_ARGS}

#
#
#

Trigger production:
  extends: .prepare_stage
  image: curlimages/curl:7.67.0
  when: manual
  variables:
    GIT_STRATEGY: none
  only:
    refs:
      - tags
  script:
    - curl --request POST
      --form ref="${CI_COMMIT_REF_NAME}"
      --form token="${CI_JOB_TOKEN}"
      --form variables[PRODUCTION]="true"
      ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/trigger/pipeline

Trigger release:
  extends: .prepare_stage
  image: curlimages/curl:7.67.0
  when: manual
  variables:
    GIT_STRATEGY: none
  only:
    refs:
      - branches
  script:
    - curl --request POST
      --form ref="${CI_COMMIT_REF_NAME}"
      --form token="${CI_JOB_TOKEN}"
      --form variables[RELEASE]="true"
      ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/trigger/pipeline
