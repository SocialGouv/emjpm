#

.quality_stage: &quality_stage
  stage: "Code Quality"
  dependencies: []

.master_based_stage: &master_based_stage
  variables:
    GIT_STRATEGY: none
  image: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  before_script:
    # NOTE(douglasduteil): create artifact friendly path <3
    # As Gitlab artifacts paths seems to only support relative path, I recreate
    # part of the monorepo structure to be able to share coverage info (for ex.)
    - mkdir -p $CI_PROJECT_DIR/packages/{api,app}
    #
    - cd /app

###########################################
###                LINT                 ###
###########################################

Lint @emjpm/api:
  <<: *quality_stage
  <<: *master_based_stage
  script:
    - yarn workspace @emjpm/api lint

Lint @emjpm/app:
  <<: *quality_stage
  <<: *master_based_stage
  script:
    - yarn workspace @emjpm/app lint

Lint @emjpm/knex:
  <<: *quality_stage
  <<: *master_based_stage
  script:
    - yarn workspace @emjpm/knex lint

Lint @emjpm/graphql-server:
  <<: *quality_stage
  <<: *master_based_stage
  script:
    - yarn workspace @emjpm/graphql-server lint

###########################################
###                TESTS                ###
###########################################

Test @emjpm/api:
  <<: *quality_stage
  <<: *master_based_stage
  allow_failure: true
  services:
    - name: $CI_REGISTRY_IMAGE/postgres:$CI_COMMIT_SHA
      command:
        [
          "-p",
          "5434",
          "-c",
          "fsync=off",
          "-c",
          "synchronous_commit=off",
          "-c",
          "full_page_writes=off",
        ]
  artifacts:
    paths:
      - packages/api/coverage
  variables:
    GIT_STRATEGY: none
    JEST_COVERAGE_DIRECTORY: $CI_PROJECT_DIR/packages/api/coverage
    JWT_KEY: JWT_KEY
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: test
  script:
    - npx wait-for-postgres --host localhost --port 5434 --username=${POSTGRES_USER} --password=${POSTGRES_PASSWORD}
    - yarn workspace @emjpm/api test --coverage

Test @emjpm/app:
  <<: *quality_stage
  <<: *master_based_stage
  artifacts:
    paths:
      - packages/app/coverage
  variables:
    GIT_STRATEGY: none
    JEST_COVERAGE_DIRECTORY: $CI_PROJECT_DIR/packages/app/coverage
  script:
    - yarn workspace @emjpm/app test --coverage

Test @emjpm/knex:
  <<: *quality_stage
  <<: *master_based_stage
  allow_failure: true
  services:
    - name: $CI_REGISTRY_IMAGE/postgres:$CI_COMMIT_SHA
      command: ["-p", "5434"]
  variables:
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: test
  script:
    - npx wait-for-postgres --host localhost --port 5434 --username=${POSTGRES_USER} --password=${POSTGRES_PASSWORD}
    - yarn workspace @emjpm/knex test

###########################################
###                E2E                  ###
###########################################

E2E Test @optional/e2e:
  stage: "Notify Finished Deployment"
  dependencies: []
  image: $CI_REGISTRY_IMAGE/puppeteer:$CI_COMMIT_SHA
  services:
    - name: djfarrelly/maildev:1.0.0
      command: ["bin/maildev", "--web", "1080", "--smtp", "25"]
    - name: $CI_REGISTRY_IMAGE/api:$CI_COMMIT_SHA
    - name: $CI_REGISTRY_IMAGE/app:$CI_COMMIT_SHA
    - name: $CI_REGISTRY_IMAGE/postgres:$CI_COMMIT_SHA
      command:
        [
          "-p",
          "5434",
          "-c",
          "fsync=off",
          "-c",
          "synchronous_commit=off",
          "-c",
          "full_page_writes=off",
        ]
  variables:
    API_URL: http://localhost:4000
    CODECEPT_BASEURL: "http://localhost:80"
    NODE_ENV: test
    POSTGRES_PASSWORD: test
    POSTGRES_USER: postgres
    SMTP_FROM: contact@emjpm.beta.gouv.fr
    TIMEOUT: 30000 # 30_000 = 1000 * 30s
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - ./node_modules/
      - ./optional/e2e/puppetteer/node_modules
      - $CI_PROJECT_DIR/.yarn
  artifacts:
    expire_in: 1 week
    when: always
    paths:
      - optional/e2e/puppetteer/output
  script:
    - rm -rf packages/{api,app,jest-environment-knex}
    #
    - yarn config set cache-folder $CI_PROJECT_DIR/.yarn
    - yarn --production --ignore-scripts
    - yarn e2e --frozen-lockfile
    #
    # Database on localhost:5434
    - npx wait-port --timeout ${TIMEOUT} localhost:5434
    # API on localhost:4000
    - npx wait-port --timeout ${TIMEOUT} localhost:4000
    # Maildev API on localhost:1080
    - npx wait-port --timeout ${TIMEOUT} localhost:1080
    # Front on localhost:80
    - npx wait-port --timeout ${TIMEOUT} localhost:80
    #
    - yarn workspace @emjpm/knex run migrate --env test
    - yarn workspace @emjpm/knex run seeds --env test
    #
    # Allows installation of postgresql-client-10 on Debian stretch which the Node images are based on
    - PGPASSWORD=test pg_dump --host localhost --port 5434 --username=postgres -Fc emjpm_test > optional/e2e/test-seed.dump
    #
    - yarn e2e test --steps
