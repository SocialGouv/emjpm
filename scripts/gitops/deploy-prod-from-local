#!/usr/bin/env bash

# INIT
set -e

if ((BASH_VERSINFO[0] < 4)); then
    echo "Sorry, you need at least bash-4.0 to run this script." >&2
exit 1; fi

# GLOBAL VARIABLES
export REGISTRY="registry.gitlab.factory.social.gouv.fr/socialgouv/emjpm/local_build"
export COMMIT_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
export VERSION=$(printf "${COMMIT_TAG}" | sed "s/^v//")
export BRANCH_NAME=$(git branch --show-current)
export REF_SLUG=$(echo $BRANCH_NAME | sed 's/[^a-zA-Z0-9]/-/g;s/^-*//g;s/-*$//g' | cut -c1-63) # like CI_COMMIT_REF_SLUG in gitlab
export IMAGE_TAG=${IMAGE_TAG:-"$REF_SLUG"}

# HELPER FUNCTION
function urlencode {
  STDIN=`cat /dev/stdin`
  local length="${#STDIN}"
  for (( i = 0; i < length; i++ )); do
      local c="${STDIN:i:1}"
      case $c in
          [a-zA-Z0-9.~_-]) printf "$c" ;;
          *) printf '%s' "$c" | xxd -p -c1 |
                 while read c; do printf '%%%s' "$c"; done ;;
      esac
  done
}


# DOCKER BUILD FUNCTIONS
function docker_build {
  local CONTEXT=$1
  local BUILD_ARGS=$2
  echo "BUILD $CONTEXT"

  docker build \
    -f ./packages/$CONTEXT/Dockerfile \
    -t $REGISTRY/$CONTEXT:$IMAGE_TAG \
    $BUILD_ARGS \
    --progress plain \
    .
  docker push $REGISTRY/$CONTEXT:$IMAGE_TAG
}

function docker_build_node_multistage {
  local CONTEXT=$1
  local BUILDER_BUILD_ARGS=$2
  echo "BUILD $CONTEXT"

  docker build \
    -f ./packages/$CONTEXT/Dockerfile \
    --target builder \
    -t $REGISTRY/$CONTEXT.builder \
    -t $REGISTRY/$CONTEXT.builder:$IMAGE_TAG \
    --build-arg BUILD_ENV=$BUILD_ENV \
    $BUILDER_BUILD_ARGS \
    --progress plain \
    .

  docker build \
    -f ./packages/$CONTEXT/Dockerfile \
    --target server \
    -t $REGISTRY/$CONTEXT:$IMAGE_TAG \
    --build-arg BUILD_ENV=$BUILD_ENV \
    --cache-from $REGISTRY/$CONTEXT.builder \
    --progress plain \
    .
  docker push $REGISTRY/$CONTEXT:$IMAGE_TAG

}

function docker_build_all {
  start_time=$(date +%s)

  echo "# BUILDING eMJPM $IMAGE_TAG"

  export DOCKER_BUILDKIT=1
  export BUILD_ENV=${BUILD_ENV:-"pure"}
  source .env.build

  docker_build hasura &
  CHILD_PID_1=$!
  trap "kill $CHILD_PID_1;" SIGTERM SIGINT

  docker_build_node_multistage api &
  CHILD_PID_2=$!
  trap "kill $CHILD_PID_2;" SIGTERM SIGINT

  docker_build_node_multistage app "--build-arg SENTRY_PUBLIC_DSN=${SENTRY_PUBLIC_DSN}" &
  CHILD_PID_3=$!
  trap "kill $CHILD_PID_3;" SIGTERM SIGINT

  wait -n $CHILD_PID_1
  wait -n $CHILD_PID_2
  wait -n $CHILD_PID_3

  current_time=$(date +%s)
  seconds_elapsed=$(( $current_time - $start_time ))
  timestamp=$(date -d"@$seconds_elapsed" -u +%-d:%-H:%-M:%-S)
  IFS=':' read -r day hour minute second <<< "$timestamp"
  hour="$(( $hour+24*($day-1) ))"
  printf "buit in \r%02d:%02d:%02d" $hour $minute $second
}

# K8S DEPLOY FUNCTIONS

function k8s_create_namespace {

  # Create namespace
  kubectl apply -f - <<EOF
apiVersion: v1
kind: Namespace
metadata:
  annotations:
    field.cattle.io/creatorId: gitlab
    field.cattle.io/projectId: ${RANCHER_PROJECT_ID}
    git/branch: ${BRANCH_HASH}
    git/remote: ${DOMAIN}
  labels:
    cert: wildcard
    field.cattle.io/projectId: ${RANCHER_PROJECT_ID}
  name: ${K8S_NAMESPACE}
EOF

  # Create secrets
  export APP_URL_B64=$(echo $DOMAIN | base64)
  envsubst < ./.k8s/secret-dev.yml > ./.k8s/manifests/secret-dev-generated.yml
  kubectl apply -f ./.k8s/manifests/secret-dev-generated.yml -n ${K8S_NAMESPACE}

  # Create azure volume secrets for anonymized export
  export AZURE_STORAGE_ACCOUNT_NAME=$(kubectl get secret azure-${K8S_PROJECT}dev-volume -n ${K8S_PROJECT}-secret -ojsonpath='{.data.azurestorageaccountname}')
  export AZURE_STORAGE_ACCOUNT_KEY=$(kubectl get secret azure-${K8S_PROJECT}dev-volume -n ${K8S_PROJECT}-secret -ojsonpath='{.data.azurestorageaccountkey}')
  envsubst < .k8s/azure-volume-secret.yml > ./.k8s/manifests/azure-volume-secret-generated.yml
  kubectl apply -f ./.k8s/manifests/azure-volume-secret-generated.yml -n ${K8S_NAMESPACE}
}

function k8s_deploy_package {

  if [ -n "${PRODUCTION}" ]; then

    if [ -z "$PROD_PGHOST" ]; then
      echo "missing PROD_PGHOST env variable, provid it in .env.deploy" >&2
      exit 1
    fi
    export PG_HOST=$PROD_PGHOST
    if [ -z "$PROD_PGUSER" ]; then
      echo "missing PROD_PGUSER env variable, provid it in .env.deploy" >&2
      exit 1
    fi
    export POSTGRES_EMJPM_USER_ENCODED=$(echo "$PROD_PGUSER" | urlencode)
    if [ -z "$PROD_PGPASSWORD" ]; then
      echo "missing PROD_PGPASSWORD env variable, provid it in .env.deploy" >&2
      exit 1
    fi
    export POSTGRES_EMJPM_PASSWORD_ENCODED=$(echo "$PROD_PGPASSWORD" | urlencode)

    export POSTGRES_DATABASE_EMJPM=${POSTGRES_DATABASE_EMJPM:-"emjpm"}
    export EMJPM_PG_USER_ENCODED=$POSTGRES_EMJPM_USER_ENCODED
    export EMJPM_PG_PASSWORD_ENCODED=$POSTGRES_EMJPM_PASSWORD_ENCODED

  else

    if [ -z "$STAGING_PGHOST" ]; then
      echo "missing STAGING_PGHOST env variable, provid it in .env.deploy" >&2
      exit 1
    fi
    export PG_HOST=$STAGING_PGHOST
    if [ -z "$STAGING_PGUSER" ]; then
      echo "missing STAGING_PGUSER env variable, provid it in .env.deploy" >&2
      exit 1
    fi
    export POSTGRES_EMJPM_USER_ENCODED=$(echo "$STAGING_PGUSER" | urlencode)
    if [ -z "$STAGING_PGPASSWORD" ]; then
      echo "missing EMJPM_PGPASSWORD env variable, provid it in .env.deploy" >&2
      exit 1
    fi
    export POSTGRES_EMJPM_PASSWORD_ENCODED=$(echo "$STAGING_PGPASSWORD" | urlencode)

    export POSTGRES_DATABASE_EMJPM=${POSTGRES_DATABASE_EMJPM:-"emjpm"}
    export EMJPM_PG_USER_ENCODED=$POSTGRES_EMJPM_USER_ENCODED
    export EMJPM_PG_PASSWORD_ENCODED=$POSTGRES_EMJPM_PASSWORD_ENCODED

  fi

  local app_host="${DOMAIN}";
  local api_host="api-${DOMAIN}";
  local hasura_host="hasura-${DOMAIN}";

  ### CONTEXT ###
  local CONTEXT=$1
  if [ -z "$CONTEXT" ]; then
    echo "missing CONTEXT argument to k8s_deploy function" >&2
    exit 1
  fi
  local context_host_varname="${CONTEXT}_host"
  export HOST=$(eval echo \$$context_host_varname)
  if [ -z "$HOST" ]; then
    echo "unkown HOST for CONTEXT '$CONTEXT' in k8s_deploy function" >&2
    exit 1
  fi

  HELM_RENDER_ARGS="
    --set image.repository=${REGISTRY}/${CONTEXT}
    --set image.tag=${IMAGE_TAG}
    --set image.pullPolicy=Always
    --set ingress.hosts[0].host=${HOST}
    --set ingress.tls[0].hosts[0]=${HOST}
  "

  if [ -n "$PRODUCTION" ]; then
    HELM_RENDER_ARGS=" \
      --set ingress.annotations.certmanager\.k8s\.io/cluster-issuer=letsencrypt-prod \
      --set-string ingress.annotations.kubernetes\.io/tls-acme=true \
      ${HELM_RENDER_ARGS}"
  else
    HELM_RENDER_ARGS=" \
      --set ingress.tls[0].secretName=wildcard-crt \
      ${HELM_RENDER_ARGS}"
  fi

  envsubst < packages/$CONTEXT/.k8s/values.yaml \
    | helm template ${HELM_RENDER_ARGS} ${CONTEXT} packages/$CONTEXT/.k8s \
      --values - \
      > packages/$CONTEXT/.k8s/manifests/chart-generated.yaml


  echo "### DEPLOYING $CONTEXT/$IMAGE_TAG ON $HOST"
  echo "#### manifests: packages/$CONTEXT/.k8s/manifests"
  kubectl -n ${K8S_NAMESPACE} apply -f packages/$CONTEXT/.k8s/manifests

  ## force to pull latest image
  kubectl -n ${K8S_NAMESPACE} patch deployment $CONTEXT -p \
    "{\"spec\":{\"template\":{\"metadata\":{\"labels\":{\"date\":\"`date +'%s'`\"}}}}}"
}

function k8s_deploy_packages_branch {
  echo "## DEPLOYING eMJPM $IMAGE_TAG on branch ${BRANCH_NAME}"

  if [ "${BRANCH_NAME}" = "master" ]; then
    export BRANCH_HASH=master;
    export K8S_NAMESPACE="emjpm-${BRANCH_HASH}"
  elif [ "${BRANCH_NAME}" = "apitest" ]; then
    export BRANCH_HASH=apitest;
    export K8S_NAMESPACE="emjpm-${BRANCH_HASH}"
  else
    export BRANCH_HASH=$( printf "${BRANCH_NAME}" | sha1sum | cut -c1-7 )
    export K8S_NAMESPACE="emjpm-feature-${BRANCH_HASH}"
  fi
  export DOMAIN="${BRANCH_HASH}-${ROOT_DOMAIN}";
  export POSTGRES_DATABASE_EMJPM="emjpm_$( printf "${BRANCH_HASH}" | sed "s/\-//g" )"

  if [ "${BRANCH_NAME}" != "master" ]; then
    k8s_create_namespace
  fi

  k8s_deploy_package "hasura"
  k8s_deploy_package "api"
  k8s_deploy_package "app"
}

function k8s_deploy_packages_prod {
  echo "## DEPLOYING eMJPM $IMAGE_TAG on production !"

  export K8S_NAMESPACE="emjpm"
  export BRANCH_HASH=prod;
  export DOMAIN="${ROOT_DOMAIN}";
  export POSTGRES_DATABASE_EMJPM="emjpm"

  k8s_deploy_package "hasura"
  k8s_deploy_package "api"
  k8s_deploy_package "app"
}

function k8s_deploy_env_dev {

  echo "# DEPLOYING eMJPM $IMAGE_TAG on dev"

  export ROOT_DOMAIN="emjpm.dev2.fabrique.social.gouv.fr";
  export KUBECTL_CONTEXT=${KUBECTL_CONTEXT:-"dev2"}
  # export RANCHER_CLUSTER_ID="c-bd7z2"
  export RANCHER_PROJECT_ID="p-57mxc"

  kubectl config use-context $KUBECTL_CONTEXT

  k8s_deploy_packages_branch

}

function k8s_deploy_env_prod {

  echo "# DEPLOYING eMJPM $IMAGE_TAG on production"

  export ROOT_DOMAIN="emjpm.fabrique.social.gouv.fr";
  export KUBECTL_CONTEXT=${KUBECTL_CONTEXT:-"prod2"}
  export PRODUCTION="1"
  export RANCHER_CLUSTER_ID="c-kk8xm"
  export RANCHER_PROJECT_ID="p-dpgpt"

  kubectl config use-context $KUBECTL_CONTEXT

  if [ "${BRANCH_NAME}" = "master" ]; then
    k8s_deploy_packages_prod
  fi

}

function k8s_deploy_all {


  export K8S_PROJECT="emjpm"
  export NODE_ENV="production"
  source .env.deploy
  [ -f ".kubeconfig" ] && KUBECONFIG=".kubeconfig:$KUBECONFIG"
  export KUBECONFIG=$KUBECONFIG

  if [ -n "$DEPLOY_DEV" ]; then
    k8s_deploy_env_dev
  fi

  if [ -n "$DEPLOY_PROD" ]; then
    k8s_deploy_env_prod
  fi

}

# MAIN
run_main() {
  export BUILD="1"

  while [[ "$#" -gt 0 ]]
  do
    case $1 in
      -a|--all)
        export DEPLOY_DEV="1"
        export DEPLOY_PROD="1"
        ;;
      --dev)
        export DEPLOY_DEV="1"
        ;;
      --prod)
        export DEPLOY_PROD="1"
        ;;
      --skip-build)
        export BUILD=""
        ;;
    esac
    shift
  done

  if [ -n "$BUILD" ]; then
    docker_build_all $@
  fi

  k8s_deploy_all $@

}

# RUN MAIN
run_main $@