---
variables:
  K8S_NAMESPACE: "${KUBE_NAMESPACE}"
  REMOTE_URL: "https://github.com/${CI_PROJECT_PATH}.git"

  # CI variables
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://localhost:2375
  GIT_STRATEGY: fetch
  GIT_DEPTH: 5

  # Infra
  IMAGE_INFRA_BASE_NAME: infra/images-docker

  # Globals
  DOCKER_VERSION: "19.03.8"
  DOCKER_BUILDKIT: 1
  DOCKER_CLI_EXPERIMENTAL: enabled

  PROJECT: emjpm
  RANCHER_PROJECT_ID: c-kk8xm:p-dpgpt

  K8S_NAMESPACE_PREFIX: "${PROJECT}-feature"

  NODE_IMAGE: node:15-alpine

# STAGES
stages:
  - "Enable"
  - "Dependencies"
  - "Build JS"
  - "Build Docker"
  - "Deploy"
  - "Notify Finished Deployment"

# Bases Definitions to extends from

.base_deploy_chart_stage:
  extends: .base_docker_kubectl_image_stage
  script:
    - source ./.gitlab-ci/env.sh
    - echo "kubectl config set-context --current --namespace=${K8S_NAMESPACE}"
    - kubectl config set-context --current --namespace=${K8S_NAMESPACE}

    # Set own wildcard when deploying in dev environment
    - >-
      HELM_RENDER_ARGS="
        --set image.tag=$CI_COMMIT_REF_SLUG
        --set ingress.hosts[0].host=${HOST}
        --set ingress.tls[0].hosts[0]=${HOST}
        ${HELM_RENDER_ARGS}"
    # Set own certificate when deploying in prod environment
    - |-
      if [[ -n ${PRODUCTION+x} ]]; then
        HELM_RENDER_ARGS=" \
          --set ingress.annotations.certmanager\.k8s\.io/cluster-issuer=letsencrypt-prod \
          --set-string ingress.annotations.kubernetes\.io/tls-acme=true \
          ${HELM_RENDER_ARGS}"
      else
        HELM_RENDER_ARGS=" \
          --set ingress.tls[0].secretName=wildcard-crt \
          ${HELM_RENDER_ARGS}"
      fi

    # generate manifest using helm template
    - envsubst < packages/$CONTEXT/.k8s/values.yaml  | helm template ${HELM_RENDER_ARGS} ${CONTEXT} packages/$CONTEXT/.k8s --values - > packages/$CONTEXT/.k8s/manifests/chart-generated.yaml

    # apply manifests
    - kubectl apply -f packages/$CONTEXT/.k8s/manifests

.base_docker_kubectl_image_stage:
  image:
    name: registry.gitlab.factory.social.gouv.fr/devthejo/docker-kubectl-helm:1.0.0
    entrypoint: [""]

.base_create_namespace_stage:
  extends: .base_docker_kubectl_image_stage
  stage: "Build Docker"
  environment:
    name: review/${CI_COMMIT_REF_NAME}-dev
    url: https://${CI_ENVIRONMENT_SLUG}-${CI_PROJECT_ID}.${KUBE_INGRESS_BASE_DOMAIN}
  dependencies: []
  script:
    - echo "kubectl get namespace ${K8S_NAMESPACE}"
    # Skip the job if the namespace exists
    - "[[ $(kubectl get namespace ${K8S_NAMESPACE}) ]] && exit ${CI_JOB_SKIP_EXIT_CODE:-0}"
    #
    - kubectl create namespace ${K8S_NAMESPACE}
    #
    # Use wildcard certificate
    - kubectl label namespace ${K8S_NAMESPACE} cert=wildcard
    #
    # Add git metadata to be able to auto destroy that namespaces
    # see https://github.com/SocialGouv/docker/tree/v0.18.0/k8s-ns-killer
    - kubectl annotate namespace ${K8S_NAMESPACE} git/remote=${REMOTE_URL}
    - kubectl annotate namespace ${K8S_NAMESPACE} git/branch=${CI_COMMIT_REF_NAME}
    #
    # Fake rancher namespace creation
    - "[[ -z ${RANCHER_PROJECT_ID} ]] && exit ${CI_JOB_SKIP_EXIT_CODE:-0}"
    - kubectl annotate namespace ${K8S_NAMESPACE} field.cattle.io/projectId=${RANCHER_PROJECT_ID}
    - kubectl annotate namespace ${K8S_NAMESPACE} field.cattle.io/creatorId=gitlab

.base_docker_image_stage:
  image: docker:${DOCKER_VERSION}
  variables:
    DOCKER_BUILDKIT: 1
  services:
    - name: docker:${DOCKER_VERSION}-dind
      command: ["--experimental"]

.before_script_build: &before_script_build |
  echo "$CI_JOB_TOKEN" | docker login $CI_REGISTRY -u gitlab-ci-token --password-stdin
  export REGISTRY=$CI_REGISTRY_IMAGE
  export DOCKERFILE=packages/${CONTEXT}/Dockerfile
  export IMAGE_TAG=$CI_COMMIT_REF_SLUG

.notify_stage: &notify_stage
  image: registry.gitlab.factory.social.gouv.fr/socialgouv/docker/git-deploy:0.24.0
  dependencies: []

.base_notify_pending_stage:
  <<: *notify_stage
  script:
    - create-deployment
    - cat /tmp/deploy_payload.json
    - extract-deploy-id
    - echo "GitHub deployment id '$(cat DEPLOY_ID)'"
  artifacts:
    expire_in: 1 day
    paths:
      - DEPLOY_ID

.resolve_deploy_environment: &resolve_deploy_environment |
  set -x
  if [[ -n ${PRODUCTION+x} ]]; then
    export ENVIRONMENT="production"
  else
    export ENVIRONMENT=${ENVIRONMENT:-"staging"}
  fi

.base_notify_fail_stage:
  <<: *notify_stage
  allow_failure: true
  when: on_failure
  script:
    - *resolve_deploy_environment
    - update-deployment $(cat DEPLOY_ID) "${HOST}" failure

.base_notify_success_stage:
  <<: *notify_stage
  when: on_success
  script:
    - *resolve_deploy_environment
    - update-deployment $(cat DEPLOY_ID) "${HOST}" success


.base_notify_mattermost:
  image: registry.gitlab.factory.social.gouv.fr/devthejo/bash-curl:1.2.0
  dependencies: []
  before_script:
    - HOST="https://${CI_ENVIRONMENT_SLUG}-${CI_PROJECT_NAME}.${KUBE_INGRESS_BASE_DOMAIN}"

.base_delete_useless_k8s_ns_stage:
  stage: Notify Finished Deployment
  dependencies: []
  allow_failure: true
  image: registry.gitlab.factory.social.gouv.fr/socialgouv/docker/k8s-ns-killer:2.9.0
  environment: fabrique-dev
  script:
    - git remote set-url origin https://github.com/${CI_PROJECT_PATH}.git
    - echo "k8s-ns-killer ${K8S_NAMESPACE_PREFIX}"
    # - k8s-ns-killer ${K8S_NAMESPACE_PREFIX}
    # Debug mode
    - sh -x /bin/k8s-ns-killer ${K8S_NAMESPACE_PREFIX}
  only:
    - master

.base_delete_useless_managed_postgresql_stage:
  stage: Notify Finished Deployment
  dependencies: []
  allow_failure: true
  image: registry.gitlab.factory.social.gouv.fr/socialgouv/docker/pg-cleaner:0.24.0
  environment: fabrique-dev
  script:
    - python /bin/pg-cleaner.py
  only:
    - master

.enable_stage:
  stage: Enable
  image: registry.gitlab.factory.social.gouv.fr/devthejo/bash-curl:1.2.0
  except:
    variables:
      - $E2E_TEST
      - $PRODUCTION
      - $RELEASE
      - $CI_COMMIT_TAG
      - $RUN_PIPELINE

.base_stage:
  only:
    variables:
      - $RUN_PIPELINE
      - $CI_COMMIT_TAG
  except:
    variables:
      # Don't run when running e2e tests
      - $E2E_TEST
      # Don't run when deploying in production an existing image
      - $PRODUCTION
      # Don't run when tagging a commit
      - $RELEASE

.incubateur_stage:
  environment:
    name: prod2
  only:
    variables:
      - $PRODUCTION

.dev_stage:
  extends:
    - .base_stage
  environment:
    name: fabrique-dev2

############ RUN PIPELINE ########################

Notify New Pipeline:
  extends:
    - .enable_stage
    - .base_notify_mattermost
  variables:
    GIT_STRATEGY: none
  script:
    - |
      echo '{"text":"ðŸ¦Š pipeline ready to run at '${CI_PIPELINE_URL}'"}' \
        | curl -H 'Content-Type: application/json' ${MATTERMOST_WEBHOOK} -d @-

Run Pipeline:
  extends:
    - .enable_stage
  when: manual
  variables:
    GIT_STRATEGY: none
  script:
    - curl --request POST
        --form ref="${CI_COMMIT_REF_NAME}"
        --form token="${CI_JOB_TOKEN}"
        --form variables[RUN_PIPELINE]="true"
        ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/trigger/pipeline


################### CREATE NAMESPACE ##############

Create namespace:
  extends:
    - .base_create_namespace_stage
    - .dev_stage
  before_script:
    - source ./.gitlab-ci/env.sh
  after_script:
    - source ./.gitlab-ci/env.sh
    - kubectl config set-context --current --namespace=${K8S_NAMESPACE}
    #
    # Create secrets
    - export APP_URL_B64=$(echo $APP_URL | base64)
    - envsubst < ./.k8s/secret-dev.yml > ./secret-dev.yml
    - kubectl apply -f ./secret-dev.yml -n ${K8S_NAMESPACE}
    #
    # Create azure volume secrets for anonymized export
    - export AZURE_STORAGE_ACCOUNT_NAME=$(kubectl get secret azure-${K8S_PROJECT}dev-volume -n ${K8S_PROJECT}-secret -ojsonpath='{.data.azurestorageaccountname}')
    - export AZURE_STORAGE_ACCOUNT_KEY=$(kubectl get secret azure-${K8S_PROJECT}dev-volume -n ${K8S_PROJECT}-secret -ojsonpath='{.data.azurestorageaccountkey}')
    - envsubst < .k8s/azure-volume-secret.yml > ./azure-volume-secret.yml
    - kubectl apply -f ./azure-volume-secret.yml -n ${K8S_NAMESPACE}

################### Dependencies ##################
.dependencies_stage:
  extends: .base_stage
  stage: Dependencies
  dependencies:
    - Run Pipeline
  cache:
    key:
      files:
        - yarn.lock
    paths:
      - node_modules
      - "packages/*/node_modules"
      - .yarn

.base_yarn_install:
  extends: .dependencies_stage
  image: ${NODE_IMAGE}
  interruptible: true
  only:
    changes:
      - yarn.lock
  artifacts:
    expire_in: 1 month
    paths:
      - node_modules
      - "packages/*/node_modules"
      - .yarn
  script:
    - yarn --frozen-lockfile --production --ignore-scripts --cache-folder .yarn

Install Node Dependencies:
  extends:
    - .base_yarn_install


################### BUILD JS ##################
.buildjs_stage:
  extends: .base_stage
  stage: Build JS
  dependencies:
    - Run Pipeline

.base_buildjs_install:
  extends: .buildjs_stage
  image: ${NODE_IMAGE}
  interruptible: true
  cache:
    key:
      files:
        - yarn.lock
    paths:
      - node_modules
      - "packages/*/node_modules"
      - .yarn
  script:
    - yarn workspaces run postinstall
    - yarn workspace @emjpm/$CONTEXT build

Build JS api:
  extends:
    - .base_buildjs_install
  variables:
    CONTEXT: api
  artifacts:
    expire_in: 1 day
    paths:
      - packages/api/dist

Build JS app:
  extends:
    - .base_buildjs_install
  variables:
    CONTEXT: app
  artifacts:
    expire_in: 1 day
    paths:
      - packages/app/build


################### BUILD Docker ##################
.base_build_stage:
  stage: "Build Docker"
  extends:
    - .base_docker_image_stage
    - .base_stage
  before_script:
    - *before_script_build
    - source ./.gitlab-ci/env.sh
  script:
    - |
      docker build \
        -f ${DOCKERFILE} \
        -t $REGISTRY/$CONTEXT:$IMAGE_TAG \
        --build-arg BUILD_ENV=$BUILD_ENV \
        --progress plain \
        ${CONTEXT}

      docker push $REGISTRY/$CONTEXT:$IMAGE_TAG

.base_build_stage_node:
  extends: .base_build_stage
  variables:
    BUILD_ENV: usecache
  script:
    - |
      docker build \
        -f ${DOCKERFILE} \
        --target builder \
        -t $REGISTRY/$CONTEXT.builder \
        -t $REGISTRY/$CONTEXT.builder:$IMAGE_TAG \
        --build-arg BUILD_ENV=$BUILD_ENV \
        $BUILDER_BUILD_ARGS \
        --progress plain \
        ${CONTEXT}

      docker build \
        -f ${DOCKERFILE} \
        --target server \
        -t $REGISTRY/$CONTEXT:$IMAGE_TAG \
        --build-arg BUILD_ENV=$BUILD_ENV \
        --cache-from $REGISTRY/$CONTEXT.builder \
        --progress plain \
        ${CONTEXT}


################### Build Docker API ##################

Build api image:
  extends:
    - .base_build_stage_node
  needs:
    - Build JS api
  variables:
    CONTEXT: api
  before_script:
    - *before_script_build
    - source ./.gitlab-ci/env.sh
    - export DOCKER_BUILD_ARGS="--build-arg BUILD_ENV=${BUILD_ENV}"

################### Build Docker APP ##################

.build_app:
  extends:
    - .base_build_stage_node
  needs:
    - Build JS app
  before_script:
    - *before_script_build
    - source ./.gitlab-ci/env.sh
    - >-
      export DOCKER_BUILD_ARGS="
        --build-arg BUILD_ENV=${BUILD_ENV}
        --build-arg REACT_APP_SENTRY_PUBLIC_DSN=${SENTRY_PUBLIC_DSN}"
  variables:
    CONTEXT: app

Build app image:
  extends:
    - .build_app

################### Build Docker HASURA ########################

Build hasura image:
  extends:
    - .base_build_stage
  needs: []
  before_script:
    - *before_script_build
    - source ./.gitlab-ci/env.sh
  variables:
    CONTEXT: hasura

Backup PG before production (incubateur):
  extends:
    - .base_docker_kubectl_image_stage
    - .incubateur_stage
  stage: Build Docker
  interruptible: true
  script:
    - source ./.gitlab-ci/env.sh
    - kubectl config set-context --current --namespace=${K8S_NAMESPACE}

    - export PG_HOST=$(kubectl get secret azure-pg-admin-user -n ${K8S_PROJECT}-secret -ojsonpath='{.data.PG_HOST}' | base64 --decode)

    - export ADMIN_PG_USER=$(kubectl get secret azure-pg-admin-user -n ${K8S_PROJECT}-secret -ojsonpath='{.data.ADMIN_PG_USER}' | base64 --decode)
    - export ADMIN_PG_PASSWORD=$(kubectl get secret azure-pg-admin-user -n ${K8S_PROJECT}-secret -ojsonpath='{.data.ADMIN_PG_PASSWORD}' | base64 --decode)

    - kubectl delete configmap ${K8S_PROJECT}-backup-configmap-${BRANCH_HASH} || true
    - kubectl create configmap ${K8S_PROJECT}-backup-configmap-${BRANCH_HASH}
      --from-file=./.k8s/postgres/backup/configmap/

    - kubectl delete job ${K8S_PROJECT}-backup-${BRANCH_HASH} || true
    - cat .k8s/postgres/backup/job.yml | envsubst | kubectl apply -f -;

################### MANAGED PG Initialisation ##################

Init Managed Database:
  extends:
    - .base_docker_kubectl_image_stage
    - .dev_stage
    - .deploy_stage
  script:
    - source ./.gitlab-ci/env.sh
    - kubectl config set-context --current --namespace=${K8S_NAMESPACE}

    - "[[ $(kubectl get po -l 'app=init-azure-pg-job' --field-selector status.phase=Succeeded --field-selector status.phase=Running --field-selector status.phase=Pending) ]] && exit ${CI_JOB_SKIP_EXIT_CODE:-0}"

    - export PG_HOST=$(kubectl get secret azure-pg-admin-user -n ${K8S_PROJECT}-secret -ojsonpath='{.data.PG_HOST}' | base64 --decode)
    - export EMJPM_PG_USER=$(kubectl get secret azure-pg-emjpm-user -n ${K8S_PROJECT}-secret -ojsonpath='{.data.EMJPM_PG_USER}' | base64 --decode)
    - export EMJPM_PG_PASSWORD=$(kubectl get secret azure-pg-emjpm-user -n ${K8S_PROJECT}-secret -ojsonpath='{.data.EMJPM_PG_PASSWORD}' | base64 --decode)

    #
    - kubectl delete configmap ${K8S_PROJECT}-init-db-${BRANCH_HASH} || true
    - kubectl create configmap ${K8S_PROJECT}-init-db-${BRANCH_HASH}
      --from-file=./.k8s/postgres/init/configmap/
    #
    - kubectl delete job init-azure-pg-job || true
    - cat ./.k8s/postgres/init/init-azure-pg-job.yml | envsubst | kubectl apply -f -
    - kubectl wait --for=condition=complete job/init-azure-pg-job  --timeout=300s


# DEPLOY

.deploy_stage:
  stage: Deploy
  dependencies: []
  services:
    - docker:dind

############### Deploy API ###########################

.deploy_api_stage:
  extends:
    - .base_deploy_chart_stage
    - .deploy_stage
  dependencies: []
  needs:
    - Create namespace
    - Build api image
  variables:
    CONTEXT: api
    PORT: 4000
  before_script:
    - source ./.gitlab-ci/env.sh
    - kubectl config set-context --current --namespace=${K8S_NAMESPACE}
    #
    - export PG_HOST=$(kubectl get secret azure-pg-admin-user -n ${K8S_PROJECT}-secret -ojsonpath='{.data.PG_HOST}' | base64 --decode)
    - export EMJPM_PG_USER_ENCODED=$(kubectl get secret azure-pg-emjpm-user -n ${K8S_PROJECT}-secret -ojsonpath='{.data.EMJPM_PG_USER_ENCODED}' | base64 --decode)
    - export EMJPM_PG_PASSWORD_ENCODED=$(kubectl get secret azure-pg-emjpm-user -n ${K8S_PROJECT}-secret -ojsonpath='{.data.EMJPM_PG_PASSWORD_ENCODED}' | base64 --decode)
    #
    - HOST=${API_HOST}

#

Deploy api (dev):
  extends:
    - .deploy_api_stage
    - .dev_stage
  variables:
    HELM_RENDER_ARGS: >-
      --set deployment.resources.requests.memory=128Mi
      --set deployment.resources.requests.cpu=1m

Deploy api (prod):
  extends:
    - .deploy_api_stage
    - .incubateur_stage

############### Deploy APP ###############################

.deploy_app_stage:
  extends:
    - .base_deploy_chart_stage
    - .deploy_stage
  variables:
    CONTEXT: app
    PORT: 3000
  before_script:
    - source ./.gitlab-ci/env.sh
    - kubectl config set-context --current --namespace=${K8S_NAMESPACE}
    #
    - HOST=${APP_HOST}

#

Deploy app (dev):
  extends:
    - .deploy_app_stage
    - .dev_stage
  needs:
    - Create namespace
    - Build app image
  variables:
    HELM_RENDER_ARGS: >-
      --set deployment.resources.requests.memory=128Mi

Deploy app (prod):
  extends:
    - .deploy_app_stage
    - .incubateur_stage
  after_script:
    - source ./.gitlab-ci/env.sh
    - kubectl config set-context --current --namespace=${K8S_NAMESPACE}
    - kubectl apply -f ./.k8s/app-redirect.yml -n ${K8S_NAMESPACE}

# Deploy KNEX #################################

.deploy_knex_stage:
  extends:
    - .base_docker_kubectl_image_stage
    - .deploy_stage
  dependencies: []
  variables:
    CONTEXT: knex
  script:
    - source ./.gitlab-ci/env.sh
    - kubectl config set-context --current --namespace=${K8S_NAMESPACE}
    #
    - export PG_HOST=$(kubectl get secret azure-pg-admin-user -n ${K8S_PROJECT}-secret -ojsonpath='{.data.PG_HOST}' | base64 --decode)
    #
    # Backup cronjob
    - export ADMIN_PG_USER=$(kubectl get secret azure-pg-admin-user -n ${K8S_PROJECT}-secret -ojsonpath='{.data.ADMIN_PG_USER}' | base64 --decode)
    - export ADMIN_PG_PASSWORD=$(kubectl get secret azure-pg-admin-user -n ${K8S_PROJECT}-secret -ojsonpath='{.data.ADMIN_PG_PASSWORD}' | base64 --decode)

    - kubectl delete configmap ${K8S_PROJECT}-backup-configmap-${BRANCH_HASH} || true;
    - kubectl create configmap ${K8S_PROJECT}-backup-configmap-${BRANCH_HASH}
      --from-file=./.k8s/postgres/backup/configmap
    #
    - if [ -n ${PRODUCTION+x} ]; then
      kubectl delete cronjob ${K8S_PROJECT}-backup-${BRANCH_HASH} || true;
      cat ./.k8s/postgres/backup/cronjob.yml | envsubst | kubectl apply -f -;
      fi

#

Deploy knex (dev):
  extends:
    - .deploy_knex_stage
    - .dev_stage

Deploy knex (prod):
  extends:
    - .deploy_knex_stage
    - .incubateur_stage

################ Deploy HASURA #################################

.deploy_hasura_stage:
  extends:
    - .base_deploy_chart_stage
    - .deploy_stage
  needs:
    - Create namespace
    - Build hasura image
  variables:
    CONTEXT: hasura
    PORT: 80
  before_script:
    - source ./.gitlab-ci/env.sh
    - kubectl config set-context --current --namespace=${K8S_NAMESPACE}
    #
    - HOST=${HASURA_HOST}
    #
    - export PG_HOST=$(kubectl get secret azure-pg-admin-user -n ${K8S_PROJECT}-secret -ojsonpath='{.data.PG_HOST}' | base64 --decode)
    - export POSTGRES_EMJPM_USER_ENCODED=$(kubectl get secret azure-pg-emjpm-user -n ${K8S_PROJECT}-secret -ojsonpath='{.data.EMJPM_PG_USER_ENCODED}' | base64 --decode)
    - export POSTGRES_EMJPM_PASSWORD_ENCODED=$(kubectl get secret azure-pg-emjpm-user -n ${K8S_PROJECT}-secret -ojsonpath='{.data.EMJPM_PG_PASSWORD_ENCODED}' | base64 --decode)

#

Deploy hasura (dev):
  extends:
    - .deploy_hasura_stage
    - .dev_stage
  variables:
    HELM_RENDER_ARGS: >-
      --set deployment.resources.requests.memory=128Mi
      --set deployment.resources.requests.cpu=5m

Deploy hasura (prod):
  extends:
    - .deploy_hasura_stage
    - .incubateur_stage

################### Restore DATA #############################

.base_restore_pgdata:
  extends:
    - .base_docker_kubectl_image_stage
    - .dev_stage
    - .deploy_stage
  script:
    - source ./.gitlab-ci/env.sh

    - kubectl config set-context --current --namespace=${K8S_NAMESPACE}

    - export PG_HOST=$(kubectl get secret azure-pg-admin-user -n ${K8S_PROJECT}-secret -ojsonpath='{.data.PG_HOST}' | base64 --decode)

    - export EMJPM_PG_USER=$(kubectl get secret azure-pg-emjpm-user -n ${K8S_PROJECT}-secret -ojsonpath='{.data.EMJPM_PG_USER}' | base64 --decode)
    - export EMJPM_PG_PASSWORD=$(kubectl get secret azure-pg-emjpm-user -n ${K8S_PROJECT}-secret -ojsonpath='{.data.EMJPM_PG_PASSWORD}' | base64 --decode)

    - kubectl scale --replicas=0 deploy/hasura

    - kubectl delete configmap ${K8S_PROJECT}-restore-configmap-${BRANCH_HASH} || true
    - kubectl create configmap ${K8S_PROJECT}-restore-configmap-${BRANCH_HASH}
      --from-file=./.k8s/postgres/restore/configmap/

    - kubectl delete job restore-job || true
    - cat ./.k8s/postgres/restore/restore-job.yml | envsubst | kubectl apply -f -

    - kubectl wait --for=condition=complete job/restore-job  --timeout=600s
    - kubectl scale --replicas=1 deploy/hasura
    - kubectl rollout status deploy/hasura --timeout=600s

    - kubectl delete job anonymise-job || true
    - cat ./.k8s/postgres/restore/anonymise-job.yml | envsubst | kubectl apply -f -
    - kubectl wait --for=condition=complete job/anonymise-job  --timeout=600s

Restore postgres data (feat):
  extends:
    - .base_restore_pgdata
  when: manual
  except:
    refs:
      - tags
    variables:
      - $E2E_TEST
      - $PRODUCTION
      - $RELEASE

Restore postgres data (dev):
  allow_failure: true
  extends:
    - .base_restore_pgdata
  only:
    refs:
      - tags

# NOTIFY

Notify Starting Deployment:
  extends:
    - .base_notify_pending_stage
    - .base_stage
  stage: Deploy

Notify Fail:
  extends:
    - .base_notify_fail_stage
    - .base_stage
  stage: Notify Finished Deployment
  dependencies:
    - Notify Starting Deployment
  before_script:
    - source ./.gitlab-ci/env.sh
    - HOST=${APP_HOST}

Notify Success:
  extends:
    - .base_notify_success_stage
    - .base_stage
  stage: Notify Finished Deployment
  dependencies:
    - Notify Starting Deployment
  before_script:
    - source ./.gitlab-ci/env.sh
    - HOST=${APP_HOST}

############ Delete useless K8s ns #################

Delete useless k8s namespaces:
  extends:
    - .base_delete_useless_k8s_ns_stage
    - .base_stage

############ Release #################

Release:
  stage: Notify Finished Deployment
  dependencies: []
  image: registry.gitlab.factory.social.gouv.fr/devthejo/node-ops:1.0.0
  variables:
    GIT_AUTHOR_EMAIL: 45039513+SocialGroovyBot@users.noreply.github.com
    GIT_AUTHOR_NAME: Social Groovy Bot
    GIT_COMMITTER_EMAIL: $GIT_AUTHOR_EMAIL
    GIT_COMMITTER_NAME: $GIT_AUTHOR_NAME
    GIT_DEPTH: 4242
  only:
    variables:
      - $RELEASE
  before_script:
  script:
    - git checkout ${CI_COMMIT_REF_NAME}
    - git remote set-url origin https://${GITHUB_TOKEN}@github.com/${CI_PROJECT_PATH}.git
    - GH_TOKEN=${GITHUB_TOKEN} npx lerna version --force-publish --yes

############ Trigger production ###################

Trigger production:
  extends: .base_stage
  stage: Notify Finished Deployment
  image: registry.gitlab.factory.social.gouv.fr/devthejo/bash-curl:1.2.0
  when: manual
  variables:
    GIT_STRATEGY: none
  only:
    refs:
      - tags
  script:
    - curl --request POST
      --form ref="${CI_COMMIT_REF_NAME}"
      --form token="${CI_JOB_TOKEN}"
      --form variables[PRODUCTION]="true"CI_COMMIT_REF_NAME
      ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/trigger/pipeline

############ Trigger release ########################

Trigger release:
  extends: .base_stage
  stage: Notify Finished Deployment
  image: registry.gitlab.factory.social.gouv.fr/devthejo/bash-curl:1.2.0
  when: manual
  variables:
    GIT_STRATEGY: none
  only:
    refs:
      - master
  script:
    - curl --request POST
      --form ref="${CI_COMMIT_REF_NAME}"
      --form token="${CI_JOB_TOKEN}"
      --form variables[RELEASE]="true"
      ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/trigger/pipeline

############ Security scans ########################
.base_trivy_scan:
  extends:
    - .base_stage
  stage: Deploy
  services:
    - docker:dind
  image: registry.gitlab.factory.social.gouv.fr/socialgouv/docker/trivy:2.9.0
  allow_failure: true
  script:
    - source ./.gitlab-ci/env.sh
    - export IMAGE=$CI_REGISTRY_IMAGE/$CONTEXT:$CI_COMMIT_REF_SLUG
    # Build report
    - trivy --cache-dir .trivycache/ image --exit-code 0 --no-progress --format template --template "@/tmp/contrib/gitlab.tpl" -o gl-container-scanning-report.json $IMAGE
    # Print report and fail on error
    - trivy --cache-dir .trivycache/ image --exit-code 1 --no-progress $IMAGE
  cache:
    paths:
      - .trivycache/
  # Enables https://docs.gitlab.com/ee/user/application_security/container_scanning/ (Container Scanning report is available on GitLab EE Ultimate or GitLab.com Gold)
  artifacts:
    reports:
      container_scanning: gl-container-scanning-report.json

Trivy Scan api:
  extends: .base_trivy_scan
  needs:
    - Build api image
  variables:
    CONTEXT: api

Trivy Scan app:
  extends: .base_trivy_scan
  needs:
    - Build app image
  variables:
    CONTEXT: app

Trivy Scan hasura:
  extends: .base_trivy_scan
  needs:
    - Build hasura image
  variables:
    CONTEXT: hasura

##### Notify ready to trigger production #######

Notify Ready to Prod:
  extends:
    - .base_notify_mattermost
  stage: Notify Finished Deployment
  allow_failure: true
  variables:
    GIT_STRATEGY: none
  only:
    refs:
      - tags
  script:
    - |
      echo '{"text":"ðŸ”¥ release ready for production at '${CI_PIPELINE_URL}'"}' \
        | curl -H 'Content-Type: application/json' ${MATTERMOST_WEBHOOK} -d @-


############ Notify dev ########################
.base_notify_deploying_dev_mattermost:
  allow_failure: true
  extends:
    - .base_stage
    - .base_notify_mattermost
  when: on_success
  stage: Notify Finished Deployment
  script:
    - |
      source ./.gitlab-ci/env.sh
      echo '{"text":"âœ¨ dev version deployed at '${APP_URL}'"}' \
        | curl -H 'Content-Type: application/json' ${MATTERMOST_WEBHOOK} -d @-

Notify Dev (mattermost):
  extends: .base_notify_deploying_dev_mattermost

############ Notify production ########################
.base_notify_deploying_production_mattermost:
  extends: .base_notify_mattermost
  allow_failure: true
  when: on_success
  stage: Notify Finished Deployment
  only:
    variables:
      - $PRODUCTION
  script:
    - NOTIF_MSG=$(./scripts/gitops/get-release-note | sed -z 's/\n/\\n/g')
    - |
      echo '{"text":"'${NOTIF_MSG}'"}' \
        | curl -H 'Content-Type: application/json' ${MATTERMOST_WEBHOOK} -d @-


Notify Production (mattermost):
  extends: .base_notify_deploying_production_mattermost
