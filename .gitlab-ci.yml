
---

#

include:
  - /.gitlab-ci/variables.yml
  - /.gitlab-ci/extends.yml
  #
  - project: SocialGouv/gitlab-ci-yml
    file: /base_deploy_nodejs_chart_stage.yml
    ref: v4.6.0
  - project: SocialGouv/gitlab-ci-yml
    file: /base_docker_kubectl_image_stage.yml
    ref: v4.6.0
  - project: SocialGouv/gitlab-ci-yml
    file: /base_docker_helm_image_stage.yml
    ref: v4.6.0
  - project: SocialGouv/gitlab-ci-yml
    file: /base_create_namespace_stage.yml
    ref: v4.6.0
  - project: SocialGouv/gitlab-ci-yml
    file: /base_register_stage.yml
    ref: v4.6.0
  #
  - /.gitlab-ci/stages/notify.yml
  - /.gitlab-ci/stages/deploy.yml
  #
  - /packages/api/.gitlab-ci.yml
  - /packages/app/.gitlab-ci.yml
  - /packages/graphql-server/.gitlab-ci.yml
  - /packages/hasura/.gitlab-ci.yml
  - /packages/knex/.gitlab-ci.yml

#

stages:
- "Prepare"
- "Code Quality"
- "Registration"
- "Deploy"
- "Notify Finished Deployment"

#

.base_stage:
  except:
    variables:
      # Don't run when running e2e tests
      - $E2E_TEST
      # Don't run when deploying in production an existing image
      - $PRODUCTION
      # Don't run when tagging a commit
      - $RELEASE

#

.prepare_stage:
  extends: .base_stage
  stage: "Prepare"
  dependencies: []

.quality_stage:
  extends: .base_stage
  stage: "Code Quality"
  dependencies: []

.register_stage:
  extends: .base_stage
  stage: "Registration"
  interruptible: true
  dependencies: []

.deploy_stage:
  stage: "Deploy"
  except:
    variables:
      # Don't run when running e2e tests
      - $E2E_TEST
      # Don't run when tagging a commit
      - $RELEASE
  dependencies: []
  services:
    - docker:dind
  variables:
    IMAGE_TAG: ${CI_COMMIT_SHA}
    REGISTRY: ${CI_REGISTRY_IMAGE}

#

Create namespace:
  extends:
    - .base_create_namespace_stage
    - .base_stage
  before_script:
    - source ./.gitlab-ci/env.sh
  after_script:
    - source ./.gitlab-ci/env.sh
    - kubectl config set-context --current --namespace=${K8S_NAMESPACE}
    #
    # Create secrets
    - export APP_URL=$(echo $FRONTEND_URL | base64)
    - envsubst < ./.k8s/secret-dev.yml > ./secret-dev.yml
    - kubectl apply -f ./secret-dev.yml -n ${K8S_NAMESPACE}
    #
    # Create azure volume secrets for anonymized export
    - export AZURE_STORAGE_ACCOUNT_NAME=$(kubectl get secret azure-${K8S_PROJECT}dev-volume -n ${K8S_PROJECT}-secret -ojsonpath='{.data.azurestorageaccountname}')
    - export AZURE_STORAGE_ACCOUNT_KEY=$(kubectl get secret azure-${K8S_PROJECT}dev-volume -n ${K8S_PROJECT}-secret -ojsonpath='{.data.azurestorageaccountkey}')
    - envsubst < .k8s/azure-volume-secret.yml > ./azure-volume-secret.yml
    - kubectl apply -f ./azure-volume-secret.yml -n ${K8S_NAMESPACE}
