---
variables:
  DOCKER_COMPOSE_VERSION: "1.23.2"
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://localhost:2375
  DOCKER_VERSION: 18
  GIT_STRATEGY: fetch

#

.base-docker-image-stage:
  image: docker:$DOCKER_VERSION
  services:
    - docker:$DOCKER_VERSION-dind

#

.quality_stage: &quality_stage
  stage: "Code Quality"
  dependencies: []

.end_to_end_stage: &end_to_end_stage
  stage: "End to End Tests"
  dependencies: []

.master_based_stage: &master_based_stage
  variables:
    GIT_STRATEGY: none
  image: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  before_script:
    # NOTE(douglasduteil): create artifact friendly path <3
    # As Gitlab artifacts paths seems to only support relative path, I recreate
    # part of the monorepo structure to be able to share coverage info (for ex.)
    - mkdir -p $CI_PROJECT_DIR/packages/{api,app}
    #
    - cd /app

.register_stage: &register_stage
  extends: .base-docker-image-stage
  stage: "Registration"
  dependencies: []
  before_script:
    - echo "$CI_JOB_TOKEN" | docker login $CI_REGISTRY -u gitlab-ci-token --password-stdin
    # NOTE(douglasduteil): do not fail if no previous sha image exist
    - docker pull $IMAGE_NAME:$CI_COMMIT_BEFORE_SHA || true
  script:
    - echo "Build $IMAGE_NAME:$CI_COMMIT_SHA from $IMAGE_NAME:$CI_COMMIT_BEFORE_SHA"
    - docker build $DOCKER_BUILD_ARGS --cache-from $IMAGE_NAME:$CI_COMMIT_BEFORE_SHA -t $IMAGE_NAME:$CI_COMMIT_SHA $CONTEXT
    - docker push $IMAGE_NAME

#

stages:
  - "Prepare"
  - "Code Quality"
  - "Registration"
  - "End to End Tests"

#

Register socialgouv/emjpm base image:
  <<: *register_stage
  stage: "Prepare"
  variables:
    CONTEXT: .
    DOCKER_BUILD_ARGS: ""
    IMAGE_NAME: $CI_REGISTRY_IMAGE

Register postgres image:
  <<: *register_stage
  stage: "Prepare"
  variables:
    CONTEXT: ./docker/postgres
    DOCKER_BUILD_ARGS: ""
    IMAGE_NAME: $CI_REGISTRY_IMAGE/postgres

#

Lint @emjpm/api:
  <<: *quality_stage
  <<: *master_based_stage
  allow_failure: true
  script:
    - yarn workspace @emjpm/api lint

Lint @emjpm/app:
  <<: *quality_stage
  <<: *master_based_stage
  allow_failure: true
  script:
    - yarn workspace @emjpm/app lint

Lint @emjpm/knex:
  <<: *quality_stage
  <<: *master_based_stage
  allow_failure: true
  script:
    - yarn workspace @emjpm/knex lint

Lint @optional/e2e:
  <<: *quality_stage
  <<: *master_based_stage
  allow_failure: true
  script:
    - yarn run -- lerna exec --scope=@optional/e2e yarn
    - yarn run -- lerna run --scope=@optional/e2e lint

Lint jest-environment-knex:
  <<: *quality_stage
  <<: *master_based_stage
  allow_failure: true
  script:
    - yarn workspace jest-environment-knex lint

#

Test @emjpm/api:
  <<: *quality_stage
  <<: *master_based_stage
  services:
    - name: $CI_REGISTRY_IMAGE/postgres:$CI_COMMIT_SHA
      command: ["-p", "5434"]
  artifacts:
    paths:
      - packages/api/coverage
  variables:
    GIT_STRATEGY: none
    JEST_COVERAGE_DIRECTORY: $CI_PROJECT_DIR/packages/api/coverage
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: test
  script:
    - npx wait-port --timeout 30000 localhost:5434 # 30_000 = 1000 * 30s
    - yarn workspace @emjpm/api test --coverage

Test @emjpm/app:
  <<: *quality_stage
  <<: *master_based_stage
  artifacts:
    paths:
      - packages/app/coverage
  variables:
    GIT_STRATEGY: none
    JEST_COVERAGE_DIRECTORY: $CI_PROJECT_DIR/packages/app/coverage
  script:
    - yarn workspace @emjpm/app test --coverage

Test @emjpm/knex:
  <<: *quality_stage
  <<: *master_based_stage
  services:
    - name: $CI_REGISTRY_IMAGE/postgres:$CI_COMMIT_SHA
      command: ["-p", "5434"]
  variables:
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: test
  script:
    - npx wait-port --timeout 30000 localhost:5434 # 30_000 = 1000 * 30s
    - yarn workspace @emjpm/knex test

#

Send coverage result:
  stage: "Registration"
  image: node:lts-alpine
  dependencies:
    - Test @emjpm/api
    - Test @emjpm/app
  script:
    - npx codecov

#

Register api image:
  <<: *register_stage
  variables:
    CONTEXT: packages/api
    DOCKER_BUILD_ARGS: >-
      --build-arg BASE_IMAGE=$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    IMAGE_NAME: $CI_REGISTRY_IMAGE/api

Register app image:
  <<: *register_stage
  variables:
    CONTEXT: packages/app
    DOCKER_BUILD_ARGS: >-
      --build-arg BASE_IMAGE=$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    IMAGE_NAME: $CI_REGISTRY_IMAGE/app

Register e2e image:
  <<: *register_stage
  variables:
    CONTEXT: optional/e2e
    DOCKER_BUILD_ARGS: >-
      --build-arg BASE_IMAGE=$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    IMAGE_NAME: $CI_REGISTRY_IMAGE/e2e

#

E2E Test @optional/e2e:
  <<: *end_to_end_stage
  allow_failure: true
  image: $CI_REGISTRY_IMAGE/e2e:$CI_COMMIT_SHA
  services:
    - name: $CI_REGISTRY_IMAGE/api:$CI_COMMIT_SHA
      alias: emjpm__api
    - name: $CI_REGISTRY_IMAGE/app:$CI_COMMIT_SHA
    - name: $CI_REGISTRY_IMAGE/postgres:$CI_COMMIT_SHA
      command: ["-p", "5434"]
  variables:
    CYPRESS_baseUrl: "http://localhost:80"

    # NOTE(douglasduteil): Move the screenshots and videos to an artifact friendly place <3
    # As Gitlab artifacts paths seems to only support relative path, I copy the
    # screenshots and videos folder to the relative project directory
    CYPRESS_screenshotsFolder: $CI_PROJECT_DIR/optional/e2e/cypress/screenshots
    CYPRESS_videosFolder: $CI_PROJECT_DIR/optional/e2e/cypress/videos

    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: test

    NODE_ENV: test
  artifacts:
    expire_in: 1 week
    when: always
    paths:
    - optional/e2e/cypress/screenshots
    - optional/e2e/cypress/videos
  script:
    - mkdir -p $CI_PROJECT_DIR/optional/e2e/cypress
    # Database on localhost:5434
    - npx wait-port --timeout 30000 localhost:5434 # 30_000 = 1000 * 30s
    # API on localhost:4000
    - npx wait-port --timeout 30000 localhost:4000 # 30_000 = 1000 * 30s
    # Front on localhost:80
    - npx wait-port --timeout 30000 localhost:80 # 30_000 = 1000 * 30s
    #
    - cd /
    - yarn workspace @emjpm/knex run migrate --env test
    - yarn workspace @emjpm/knex run seeds --env test
    #
    - cd /app/e2e
    - yarn cypress run
