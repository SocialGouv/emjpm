---
include:
- '/k8s/app/.deploy-emjpm-app.yml'
- '/k8s/api/.deploy-emjpm-api.yml'
- '/k8s/postgres/.deploy-emjpm-postgres.yml'

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://localhost:2375
  DOCKER_VERSION: "18.06"
  IMAGE_INFRA_BASE_NAME: "infra/images-docker"
  APP_PORT: 80
  API_PORT: 4000
  GIT_STRATEGY: fetch
  DEV_ENVIRONMENT_NAME: "dev.factory"
  PROD_ENVIRONMENT_NAME: "incubateur"

#

.base-docker-image-stage:
  image: docker:$DOCKER_VERSION
  services:
  - docker:$DOCKER_VERSION-dind

#

.get_github_id_stage: &get_github_id_stage
  image:
    name: $CI_REGISTRY/$IMAGE_INFRA_BASE_NAME/docker-kube:latest
    entrypoint: [""]
  before_script:
  - envsubst < k8s/scripts/get-deploy-id.sh > k8s/scripts/get-github-deploy-id.sh
  script:
  - sh k8s/scripts/get-github-deploy-id.sh
  artifacts:
    paths:
    - github_deploy_id

.quality_stage: &quality_stage
  stage: "Code Quality"
  dependencies: []

.end_to_end_stage: &end_to_end_stage
  stage: "End to End Tests"
  dependencies: []

.master_based_stage: &master_based_stage
  variables:
    GIT_STRATEGY: none
  image: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  before_script:
    # NOTE(douglasduteil): create artifact friendly path <3
    # As Gitlab artifacts paths seems to only support relative path, I recreate
    # part of the monorepo structure to be able to share coverage info (for ex.)
    - mkdir -p $CI_PROJECT_DIR/packages/{api,app}
    #
    - cd /app

.register_stage: &register_stage
  extends: .base-docker-image-stage
  stage: "Registration"
  dependencies: []
  before_script:
  - echo "$CI_JOB_TOKEN" | docker login $CI_REGISTRY -u gitlab-ci-token --password-stdin
  # NOTE(douglasduteil): do not fail if no previous sha image exist
  - docker pull $IMAGE_NAME:$CI_COMMIT_BEFORE_SHA || true
  script:
  - echo "Build $IMAGE_NAME:$CI_COMMIT_SHA from $IMAGE_NAME:$CI_COMMIT_BEFORE_SHA"
  - docker build $DOCKER_BUILD_ARGS --cache-from $IMAGE_NAME:$CI_COMMIT_BEFORE_SHA -t $IMAGE_NAME:$CI_COMMIT_SHA $CONTEXT
  - docker push $IMAGE_NAME

.deploy_stage: &deploy_stage
  stage: "Deploy EMJPM"
  dependencies: []
  variables: &deploy_stage_variables
    EMJPM_REGISTRY: $CI_REGISTRY_IMAGE
    IMAGE_TAG: $CI_COMMIT_SHA

.send_url_to_github_stage: &send_url_to_github_stage
  stage: "Send Url"
  image:
    name: $CI_REGISTRY/$IMAGE_INFRA_BASE_NAME/docker-kube:latest
    entrypoint: [""]
  script:
  - export DEPLOY_ID=$(cat github_deploy_id)
  - envsubst < k8s/scripts/send-url.sh > k8s/scripts/send-url-to-github.sh
  - sh k8s/scripts/send-url-to-github.sh $CI_COMMIT_REF_NAME

#

stages:
- "Prepare"
- "Code Quality"
- "Registration"
- "Deploy EMJPM"
- "End to End Tests"
- "Send Url"
- "Delete k8s objects"


###########################################
###               PREPARE               ###
###########################################


Get Github Id (dev):
  <<: *get_github_id_stage
  stage: "Prepare"
  environment:
    name: $DEV_ENVIRONMENT_NAME
  except:
  - master

Get Github Id (prod):
  <<: *get_github_id_stage
  stage: "Prepare"
  environment:
    name: $PROD_ENVIRONMENT_NAME
  only:
  - master

Register socialgouv/emjpm base image:
  <<: *register_stage
  stage: "Prepare"
  variables:
    CONTEXT: .
    DOCKER_BUILD_ARGS: ""
    IMAGE_NAME: $CI_REGISTRY_IMAGE

Register postgres image:
  <<: *register_stage
  stage: "Prepare"
  variables:
    CONTEXT: ./docker/postgres
    DOCKER_BUILD_ARGS: ""
    IMAGE_NAME: $CI_REGISTRY_IMAGE/postgres


###########################################
###                LINT                 ###
###########################################


Lint @emjpm/api:
  <<: *quality_stage
  <<: *master_based_stage
  script:
  - yarn workspace @emjpm/api lint

Lint @emjpm/app:
  <<: *quality_stage
  <<: *master_based_stage
  script:
  - yarn workspace @emjpm/app lint

Lint @emjpm/knex:
  <<: *quality_stage
  <<: *master_based_stage
  script:
  - yarn workspace @emjpm/knex lint

Lint @optional/e2e:
  <<: *quality_stage
  <<: *master_based_stage
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - /app/optional/e2e/node_modules/
      - $CI_PROJECT_DIR/.yarn
  script:
    - yarn config set cache-folder $CI_PROJECT_DIR/.yarn
    - yarn run -- lerna exec --scope=@optional/e2e yarn -- --ignore-scripts
    - yarn run -- lerna run --scope=@optional/e2e lint

Lint jest-environment-knex:
  <<: *quality_stage
  <<: *master_based_stage
  script:
  - yarn workspace jest-environment-knex lint


###########################################
###                TESTS                ###
###########################################


Test @emjpm/api:
  <<: *quality_stage
  <<: *master_based_stage
  services:
    - name: $CI_REGISTRY_IMAGE/postgres:$CI_COMMIT_SHA
      command:
        [
          "-p",
          "5434",
          "-c",
          "fsync=off",
          "-c",
          "synchronous_commit=off",
          "-c",
          "full_page_writes=off",
        ]
  artifacts:
    paths:
      - packages/api/coverage
  variables:
    GIT_STRATEGY: none
    JEST_COVERAGE_DIRECTORY: $CI_PROJECT_DIR/packages/api/coverage
    JWT_KEY: JWT_KEY
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: test
  script:
    - npx wait-port --timeout 30000 localhost:5434 # 30_000 = 1000 * 30s
    - yarn workspace @emjpm/api test --coverage

Test @emjpm/app:
  <<: *quality_stage
  <<: *master_based_stage
  artifacts:
    paths:
      - packages/app/coverage
  variables:
    GIT_STRATEGY: none
    JEST_COVERAGE_DIRECTORY: $CI_PROJECT_DIR/packages/app/coverage
  script:
  - yarn workspace @emjpm/app test --coverage
  after_script:
  - CI_PROJECT_DIR=/app npx codecov -F app

Test @emjpm/knex:
  <<: *quality_stage
  <<: *master_based_stage
  services:
  - name: $CI_REGISTRY_IMAGE/postgres:$CI_COMMIT_SHA
    command: ["-p", "5434"]
  variables:
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: test
  script:
  - npx wait-port --timeout 30000 localhost:5434 # 30_000 = 1000 * 30s
  - yarn workspace @emjpm/knex test


###########################################
###       REGISTER DOCKER IMAGES        ###
###########################################


Send coverage result:
  stage: "Registration"
  image: node:lts-alpine
  dependencies:
    - Test @emjpm/api
    - Test @emjpm/app
  script:
    - npx codecov

#

Register api image:
  <<: *register_stage
  variables:
    CONTEXT: packages/api
    DOCKER_BUILD_ARGS: >-
      --build-arg BASE_IMAGE=$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    IMAGE_NAME: $CI_REGISTRY_IMAGE/api

Register app image:
  <<: *register_stage
  variables:
    CONTEXT: packages/app
    DOCKER_BUILD_ARGS: >-
      --build-arg BASE_IMAGE=$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
      --file ./packages/app/Dockerfile.kubernetes
    IMAGE_NAME: $CI_REGISTRY_IMAGE/app

Register e2e image:
  <<: *register_stage
  variables:
    CONTEXT: optional/e2e
    DOCKER_BUILD_ARGS: >-
      --build-arg BASE_IMAGE=$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    IMAGE_NAME: $CI_REGISTRY_IMAGE/e2e


###########################################
###            DEPLOY TO K8S            ###
###########################################


Deploy @emjpm/app (dev):
  <<: *deploy_stage
  extends: .deploy-emjpm-app-k8s-dev
  variables:
    <<: *deploy_stage_variables
    PORT: $APP_PORT
  environment:
    name: $DEV_ENVIRONMENT_NAME
  except:
  - master

Deploy @emjpm/api (dev):
  <<: *deploy_stage
  extends: .deploy-emjpm-api-k8s-dev
  variables:
    <<: *deploy_stage_variables
    PORT: $API_PORT
  environment:
    name: $DEV_ENVIRONMENT_NAME
  except:
  - master

Deploy postgreSQL (dev):
  <<: *deploy_stage
  extends: .deploy-emjpm-postgres-k8s-dev
  variables:
    <<: *deploy_stage_variables
  environment:
    name: $DEV_ENVIRONMENT_NAME
  except:
  - master

Deploy @emjpm/app (prod):
  <<: *deploy_stage
  extends: .deploy-emjpm-app-k8s-prod
  variables:
    <<: *deploy_stage_variables
    PORT: $APP_PORT
  environment:
    name: $PROD_ENVIRONMENT_NAME
  only:
  - master

Deploy @emjpm/api (prod):
  <<: *deploy_stage
  extends: .deploy-emjpm-api-k8s-prod
  variables:
    <<: *deploy_stage_variables
    PORT: $API_PORT
  environment:
    name: $PROD_ENVIRONMENT_NAME
  only:
  - master

Deploy postgreSQL (prod):
  <<: *deploy_stage
  extends: .deploy-emjpm-postgres-k8s-prod
  variables:
    <<: *deploy_stage_variables
  environment:
    name: $PROD_ENVIRONMENT_NAME
  only:
  - master


###########################################
###           END TO END TESTS          ###
###########################################


E2E Test @optional/e2e:
  <<: *end_to_end_stage
  allow_failure: true
  image: cypress/base:10.16.0
  services:
    - name: $CI_REGISTRY_IMAGE/api:$CI_COMMIT_SHA
    - name: $CI_REGISTRY_IMAGE/app:$CI_COMMIT_SHA
    - name: $CI_REGISTRY_IMAGE/postgres:$CI_COMMIT_SHA
      command:
        [
          "-p",
          "5434",
          "-c",
          "fsync=off",
          "-c",
          "synchronous_commit=off",
          "-c",
          "full_page_writes=off",
        ]
  variables:
    CYPRESS_baseUrl: "http://localhost:80"
    API_URL: http://localhost:4000
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: test
    NODE_ENV: test
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - ./node_modules/
      - ./optional/e2e/node_modules/
      - $CI_PROJECT_DIR/.yarn
  artifacts:
    expire_in: 1 week
    when: always
    paths:
      - optional/e2e/cypress/screenshots
      - optional/e2e/cypress/videos
  script:
    - rm -rf packages/{api,app,jest-environment-knex}
    #
    - yarn config set cache-folder $CI_PROJECT_DIR/.yarn
    - yarn --production --ignore-scripts
    - yarn run -- lerna exec --scope=@optional/e2e yarn -- --frozen-lockfile
    #
    # Database on localhost:5434
    - npx wait-port --timeout 30000 localhost:5434 # 30_000 = 1000 * 30s
    # API on localhost:4000
    - npx wait-port --timeout 30000 localhost:4000 # 30_000 = 1000 * 30s
    # Front on localhost:80
    - npx wait-port --timeout 30000 localhost:80 # 30_000 = 1000 * 30s
    #
    - yarn workspace @emjpm/knex run migrate --env test
    - yarn workspace @emjpm/knex run seeds --env test
    #
    - yarn run -- lerna exec --scope=@optional/e2e yarn -- cypress run


Send deployment url to Github (dev):
  <<: *send_url_to_github_stage
  before_script:
  - HASH_BRANCH_NAME=$(printf "$CI_COMMIT_REF_NAME" | sha1sum | cut -c1-5)
  - export HASH_BRANCH_NAME=$HASH_BRANCH_NAME
  - export URL=http://$HASH_BRANCH_NAME-emjpm.${CI_ENVIRONMENT_NAME}.social.gouv.fr/
  environment:
    name: $DEV_ENVIRONMENT_NAME
  except:
  - master

Send deployment url to Github (prod):
  <<: *send_url_to_github_stage
  variables:
    URL: https://emjpm.$CI_ENVIRONMENT_NAME.social.gouv.fr/
  environment:
    name: $PROD_ENVIRONMENT_NAME
  only:
  - master


###########################################
###     DELETE USELESS K8S OBJECTS      ###
###########################################


Delete useless k8s objects:
  stage: "Delete k8s objects"
  image:
    name: $CI_REGISTRY/$IMAGE_INFRA_BASE_NAME/docker-kube:latest
    entrypoint: [""]
  before_script:
  - /apps/create-kubeconfig.sh
  script:
  - python3 k8s/scripts/delete-k8s-objects.py
  environment:
    name: $DEV_ENVIRONMENT_NAME
  only:
  - master
